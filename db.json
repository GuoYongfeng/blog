{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/spfk/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/showshare.css","path":"css/showshare.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/loading-style.css","path":"css/loading-style.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/多说.css","path":"css/多说.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/coderwall.png","path":"img/coderwall.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/delicious.png","path":"img/delicious.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/douban.png","path":"img/douban.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/google.png","path":"img/google.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/guo.jpg","path":"img/guo.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/linkedin.png","path":"img/linkedin.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/pinboard.png","path":"img/pinboard.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/mail.png","path":"img/mail.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/pinterest.png","path":"img/pinterest.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/rss.png","path":"img/rss.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/twitter.png","path":"img/twitter.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/weibo.png","path":"img/weibo.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/github.png","path":"img/github.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/zhihu.png","path":"img/zhihu.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/TweenMax.js","path":"js/TweenMax.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/pace.js","path":"js/pace.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/facebook.png","path":"img/facebook.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/head.jpg","path":"img/head.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/TweenMax.min.js","path":"js/TweenMax.min.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/pace/pace-theme-flash.css","path":"css/pace/pace-theme-flash.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-11.jpg","path":"background/bg-11.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-10.jpg","path":"background/bg-10.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-14.jpg","path":"background/bg-14.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-17.jpg","path":"background/bg-17.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-7.jpg","path":"background/bg-7.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","path":"js/404/jquery.parallaxify-0.0.2.min.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-15.jpg","path":"background/bg-15.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/404/jquery-2.0.3.min.js","path":"js/404/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-13.jpg","path":"background/bg-13.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-9.jpg","path":"background/bg-9.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-8.jpg","path":"background/bg-8.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-19.jpg","path":"background/bg-19.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-22.jpg","path":"background/bg-22.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-23.jpg","path":"background/bg-23.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg.jpg","path":"background/bg.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/bg.jpg","path":"img/bg.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-12.jpg","path":"background/bg-12.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-18.jpg","path":"background/bg-18.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-20.jpg","path":"background/bg-20.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-21.jpg","path":"background/bg-21.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-16.jpg","path":"background/bg-16.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/spfk/_config.yml","hash":"8585f97f5423b9e66aca59893e1b4f7f6942f91b","modified":1458028258787},{"_id":"themes/spfk/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1458027067389},{"_id":"themes/spfk/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1458027068311},{"_id":"themes/spfk/README.md","hash":"6512a339634b2cb956b889975c29fe5e8de045d1","modified":1458027067393},{"_id":"themes/spfk/source/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1458027068320},{"_id":"source/_posts/hello-world.md","hash":"d5c6c8b74503fd0ea40c7fd7a5d0085c73f56aca","modified":1458026712543},{"_id":"themes/spfk/languages/de.yml","hash":"bc80f78f61c3d7af9652e6aa6fc3e4ff39b0c8d3","modified":1458027067399},{"_id":"themes/spfk/languages/default.yml","hash":"f0a7a032b31555c9ec05a711e1ac19bb07724708","modified":1458027067402},{"_id":"themes/spfk/languages/zh-Hans.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1458027067416},{"_id":"themes/spfk/languages/en.yml","hash":"a093e794aef63ec9e9e9ef490cf7e4474e45e59f","modified":1458027067406},{"_id":"themes/spfk/languages/fr-FR.yml","hash":"04b9a0d80d88d01e039e8077afe88f741e9620ba","modified":1458027067410},{"_id":"themes/spfk/languages/ru.yml","hash":"62f84ea82a696060c481fc22d4742e6201bb9bdc","modified":1458027067413},{"_id":"themes/spfk/languages/zh-hk.yml","hash":"e702fc43556e54c396917bdf7c869d528742e28b","modified":1458027067419},{"_id":"themes/spfk/languages/zh.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1458027067425},{"_id":"themes/spfk/languages/zh-tw.yml","hash":"005559baa96b7bb34e1efe6b031829a95d58d5e0","modified":1458027067422},{"_id":"themes/spfk/source/css/_variables.styl","hash":"11fe650f1f335795ab971965c3ec0ed36e211956","modified":1458027068881},{"_id":"themes/spfk/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1458027068700},{"_id":"themes/spfk/source/css/showshare.css","hash":"60b1deb39dca09393b5cbab074b1508411f55770","modified":1458027068904},{"_id":"themes/spfk/source/css/loading-style.css","hash":"ef12c256b59ed836994afed35bf02556248133ce","modified":1458027068889},{"_id":"themes/spfk/source/css/style.styl","hash":"05e614b9e50b8e3fbb4be741bfadfc7453c0878c","modified":1458027068910},{"_id":"themes/spfk/source/css/多说.css","hash":"c98b8f526c4fa094498d0a564bb201cc8151d5f1","modified":1458027069097},{"_id":"themes/spfk/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1458027068263},{"_id":"themes/spfk/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1458027068257},{"_id":"themes/spfk/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1458027068269},{"_id":"themes/spfk/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1458027068275},{"_id":"themes/spfk/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1458027068306},{"_id":"themes/spfk/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1458027068300},{"_id":"themes/spfk/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1458027069113},{"_id":"themes/spfk/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1458027069104},{"_id":"themes/spfk/layout/plugins.swig","hash":"4c978bfbde006b6e3b82f4931541fada9381806d","modified":1458027068291},{"_id":"themes/spfk/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1458027068284},{"_id":"themes/spfk/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1458027069109},{"_id":"themes/spfk/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1458027069116},{"_id":"themes/spfk/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1458027069119},{"_id":"themes/spfk/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1458027069122},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1458027069171},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1458027069164},{"_id":"themes/spfk/source/img/avatar.jpg","hash":"187059af0f1aff7047086f96a0575f7e8cf37e59","modified":1458028248426},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1458027069179},{"_id":"themes/spfk/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1458027069255},{"_id":"themes/spfk/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1458027069258},{"_id":"themes/spfk/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1458027069261},{"_id":"themes/spfk/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1458027069275},{"_id":"themes/spfk/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1458027069283},{"_id":"themes/spfk/source/img/guo.jpg","hash":"104c4e372694ae26542e50ff15a28b6bb82838e5","modified":1457581538427},{"_id":"themes/spfk/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1458027069287},{"_id":"themes/spfk/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1458027069290},{"_id":"themes/spfk/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1458027069296},{"_id":"themes/spfk/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1458027069293},{"_id":"themes/spfk/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1458027069299},{"_id":"themes/spfk/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1458027069302},{"_id":"themes/spfk/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1458027069305},{"_id":"themes/spfk/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1458027069310},{"_id":"themes/spfk/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1458027069313},{"_id":"themes/spfk/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1458027069272},{"_id":"themes/spfk/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1458027069316},{"_id":"themes/spfk/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1458027069358},{"_id":"themes/spfk/source/js/TweenMax.js","hash":"1f60b6ccd135d181b78254468ffda1c7b9d51556","modified":1458027069336},{"_id":"themes/spfk/source/js/jquery.lazyload.js","hash":"9c34c37b4dca82386648d364da913153d1db902e","modified":1458027069363},{"_id":"themes/spfk/source/js/clipboard.min.js","hash":"fe53ec94d317bae8f12d1a5eee23040bf02680bb","modified":1458027069352},{"_id":"themes/spfk/source/js/pace.js","hash":"d9cfcb7e1fc4b827a64491726c9a78b9886b3793","modified":1458027069380},{"_id":"themes/spfk/source/js/main.js","hash":"99558632eb0cc7e387fcd7fa942b46cc1e1efc07","modified":1458027069369},{"_id":"themes/spfk/source/js/mobile.js","hash":"baed8d560883c842c2b8c3e0fadcf359f97140d0","modified":1458027069375},{"_id":"themes/spfk/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1458027069308},{"_id":"themes/spfk/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1458027069265},{"_id":"themes/spfk/source/img/favicon.png","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1458027069269},{"_id":"themes/spfk/source/js/pc.js","hash":"482dc45356756150f0bee80c8d9a0987965b89ea","modified":1458027069556},{"_id":"themes/spfk/source/js/plugins.js","hash":"63e93eee75d6a83717af73dcc9829983123e01c1","modified":1458027069567},{"_id":"themes/spfk/source/img/head.jpg","hash":"80c0999acfc1173183d3dd243b4b90d077ab97cb","modified":1458027069279},{"_id":"themes/spfk/source/js/TweenMax.min.js","hash":"2207f42520d5c548702511180e500c3e077605f8","modified":1458027069343},{"_id":"themes/spfk/source/background/bg-3.jpg","hash":"93dc868d22d60de1376e7f8d168a11d598dd7ee4","modified":1458027068599},{"_id":"themes/spfk/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1458027068869},{"_id":"themes/spfk/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1458027068873},{"_id":"themes/spfk/source/css/_partial/archive.styl","hash":"dc3c5531589dc2858e20d01a0db5d116d6b7f507","modified":1458027068708},{"_id":"themes/spfk/source/css/_partial/article.styl","hash":"48c6bc5556214c41fc0c5d45e66ae15da716ce24","modified":1458027068716},{"_id":"themes/spfk/source/css/_partial/baidushare.styl","hash":"4df95b4bb2d092fb4edacaace6da75b68b76ffc9","modified":1458027068725},{"_id":"themes/spfk/source/css/_partial/footer.styl","hash":"a38dd264db83942da95713b78311e4cca0d99325","modified":1458027068755},{"_id":"themes/spfk/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1458027068776},{"_id":"themes/spfk/source/css/_partial/highlight.styl","hash":"72d86dfef8547dfa42dc42c84ea257a394780d0a","modified":1458027068768},{"_id":"themes/spfk/source/css/_partial/main.styl","hash":"112cce19324f9b323f7936490eabbd4ae8c97a8c","modified":1458027068785},{"_id":"themes/spfk/source/css/_partial/mains.styl","hash":"590e95356841da1ccca91c87ad90153fa3941c68","modified":1458027068795},{"_id":"themes/spfk/source/css/_partial/mobile.styl","hash":"34e57e1e364830cf63d030a222c1f6f0b417ebe0","modified":1458027068813},{"_id":"themes/spfk/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1458027068760},{"_id":"themes/spfk/source/css/_partial/mobile-slider.styl","hash":"211a4286f60751c372090fa96f384521e2ce352c","modified":1458027068805},{"_id":"themes/spfk/source/css/_partial/page.styl","hash":"fd30cf933e39ee348e69cc8458455cc4f622b7e9","modified":1458027068822},{"_id":"themes/spfk/source/css/_partial/plugins.styl","hash":"98b6db59fbedee6f2a35b76624cce7b5f8ffce94","modified":1458027068828},{"_id":"themes/spfk/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1458027068861},{"_id":"themes/spfk/source/css/_partial/tagcloud.styl","hash":"fbfc24f48dbdd193cc7e916f5ae00e6cdcf22def","modified":1458027068852},{"_id":"themes/spfk/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1458027068841},{"_id":"themes/spfk/source/css/pace/pace-theme-flash.css","hash":"65ce5d4aac09e570914a075a4fd17941c9a51c47","modified":1458027068898},{"_id":"themes/spfk/source/css/_partial/share.styl","hash":"3cfc59278c21b504f8f633e08767a449e03af8d0","modified":1458027068845},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.css","hash":"6d39a08bc85169eca450978f895f85d5d3451c0a","modified":1458027069189},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.min.css","hash":"624e4a106f0cf385ff4bd6a65c52cecd84f42ef9","modified":1458027069196},{"_id":"themes/spfk/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1458027067433},{"_id":"themes/spfk/layout/_partial/after-footer.ejs","hash":"f7ddb3c0245b9e6dbdbe3e6c716811909d482941","modified":1458027067429},{"_id":"themes/spfk/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1458027067437},{"_id":"themes/spfk/layout/_partial/article.ejs","hash":"10d222822c701da9dd223b3a3d520fe800cd2032","modified":1458027067441},{"_id":"themes/spfk/layout/_partial/background.ejs","hash":"054cbde2b775dd05f942e62d3ba5374ff8c71fea","modified":1458027067446},{"_id":"themes/spfk/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1458027067786},{"_id":"themes/spfk/layout/_partial/bodybackground.ejs","hash":"ad24b949bbe4fadf7549be3d1df76fc7444d1adc","modified":1458027067725},{"_id":"themes/spfk/layout/_partial/footer.ejs","hash":"db08f6276c2b501ad16a335f5d0d06c1b4e24d35","modified":1458027067777},{"_id":"themes/spfk/layout/_partial/head.ejs","hash":"d037a5fb0f81571ae454187deaae68f1285db56d","modified":1458027067796},{"_id":"themes/spfk/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1458027067808},{"_id":"themes/spfk/layout/_partial/hide-labels.ejs","hash":"cf8ad5201c1f0729203acd0e9258a4677dbc164b","modified":1458027067816},{"_id":"themes/spfk/layout/_partial/page.ejs","hash":"f599d1e578d14df0d5da633975ef083169b32fe6","modified":1458027067853},{"_id":"themes/spfk/layout/_partial/left-col.ejs","hash":"edd5439bf3d8d1d722644637744f89b9d5feefdb","modified":1458027067825},{"_id":"themes/spfk/layout/_partial/plugin.swig","hash":"b8539477a33580d9e493365f16e7b7d40afc5e5c","modified":1458027067865},{"_id":"themes/spfk/layout/_partial/mobile-nav.ejs","hash":"d4565d52e6536465c740ad8dc5737c2e8eed9f05","modified":1458027067848},{"_id":"themes/spfk/layout/_partial/theme.swig","hash":"96ae0d2429f712faf2964ed74fbeffc395accac2","modified":1458027068231},{"_id":"themes/spfk/layout/_partial/scrolling-button.ejs","hash":"40573748d4a14530e6052836ef8a7063e6486d45","modified":1458027068222},{"_id":"themes/spfk/layout/_partial/post-nav-button.ejs","hash":"d71514740a0d967ff2882bf4b5bb794bb8b28793","modified":1458027067872},{"_id":"themes/spfk/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1458027069127},{"_id":"themes/spfk/layout/_partial/work.swig","hash":"f0191892b19a19d7bb59f97c659611208b53c81d","modified":1458027068250},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1458027069130},{"_id":"themes/spfk/layout/_partial/mathjax.ejs","hash":"7be03a92dabeb2f94bf0e731d12a1c1146d736dd","modified":1458027067837},{"_id":"themes/spfk/layout/_partial/toc.ejs","hash":"8081ae5881736d72c3bf126b165efe20b6b5a93b","modified":1458027068239},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1458027069151},{"_id":"themes/spfk/layout/_partial/case.swig","hash":"ff7174ff79bfe82a70b03a07d78583b1e8d1827f","modified":1458027067735},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1458027069136},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1458027069143},{"_id":"themes/spfk/source/background/bg-11.jpg","hash":"bbbd86ccd05be0426d3ec79c892e20324b16d345","modified":1458027068365},{"_id":"themes/spfk/source/background/bg-10.jpg","hash":"204b173179995ff3b2e47e22c50e9afcbe54b700","modified":1458027068350},{"_id":"themes/spfk/source/background/bg-14.jpg","hash":"ca3d16a7a3e74cc7329610860f6a9657f57b4c5c","modified":1458027068415},{"_id":"themes/spfk/source/background/bg-17.jpg","hash":"827ea862f01b3c0717c8c20d177ecb5862f61c76","modified":1458027068466},{"_id":"themes/spfk/source/background/bg-7.jpg","hash":"150a094442b547b3c1af2198e0887a667594e547","modified":1458027068659},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1458027069157},{"_id":"themes/spfk/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1458027069206},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1458027069211},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1458027069237},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1458027069242},{"_id":"themes/spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","hash":"4bbd22670cd359d05e78c186a98288fb21fbf092","modified":1458027069330},{"_id":"themes/spfk/source/background/bg-15.jpg","hash":"e3065004c297c2c421eced09a37bed02901f80bd","modified":1458027068432},{"_id":"themes/spfk/source/background/bg-1.jpg","hash":"919f3cb49be09cbc54d96ab3c8c3428867f29e3c","modified":1458027068334},{"_id":"themes/spfk/source/background/bg-5.jpg","hash":"2cfa6f688b60992a8efee8f4c43fb1971f8528aa","modified":1458027068634},{"_id":"themes/spfk/source/css/_partial/customise/blockquote.styl","hash":"edfed5def2ad4f7fdad0eb50b26a51c3b010c2b1","modified":1458027068734},{"_id":"themes/spfk/source/css/_partial/customise/inline-code.styl","hash":"aedbcd697c9fbaeeb93c068be3db771c41feba0d","modified":1458027068748},{"_id":"themes/spfk/source/css/_partial/post/youyan.styl","hash":"9076b0d3c231e16b8a1d7f834e62a98d843edd32","modified":1458027068834},{"_id":"themes/spfk/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1458027068740},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1458027069232},{"_id":"themes/spfk/source/js/404/jquery-2.0.3.min.js","hash":"bbc61d6a6dd66b913c6f237f29475a889fbe3015","modified":1458027069322},{"_id":"themes/spfk/layout/_partial/comments/duoshuo.ejs","hash":"1f9ac8182fe0b867a8f1988888336c40c25894cd","modified":1458027067757},{"_id":"themes/spfk/layout/_partial/comments/disqus.ejs","hash":"2e5cad68bc59190b4158f4ab1879a222ca49a0d2","modified":1458027067745},{"_id":"themes/spfk/layout/_partial/comments/youyan.ejs","hash":"142e1bb357d738663655ddab25f75e85e20345e4","modified":1458027067769},{"_id":"themes/spfk/layout/_partial/post/TipTitle.ejs","hash":"a1b64506cd6aba3cd8ab48cf3ee0d6477123d6b1","modified":1458027067885},{"_id":"themes/spfk/layout/_partial/post/baidu-share.ejs","hash":"136d1ffb6176e220e034a601df9c86f005fd9b4f","modified":1458027067895},{"_id":"themes/spfk/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1458027068144},{"_id":"themes/spfk/layout/_partial/post/baidu_analytics.ejs","hash":"eb29550e091f81a55eb45c6e57dfccad751eaa4a","modified":1458027068135},{"_id":"themes/spfk/layout/_partial/post/date.ejs","hash":"a9fc6bac9e1b90c1c17c0d0ffd97f9b108072fbe","modified":1458027068151},{"_id":"themes/spfk/layout/_partial/post/nav.ejs","hash":"2605463dd8738b75f7c9c97929248e72792183f0","modified":1458027068167},{"_id":"themes/spfk/layout/_partial/post/loading.ejs","hash":"ba96f9dd60069b3ac2a332c45b1df82c0bf68f21","modified":1458027068158},{"_id":"themes/spfk/layout/_partial/post/share.ejs","hash":"bfac451ed8d632dbba84673691cc5ea3315c1469","modified":1458027068178},{"_id":"themes/spfk/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1458027068209},{"_id":"themes/spfk/layout/_partial/post/swiftype.ejs","hash":"90f03e7f0ca811f3caeeaaeb2aaf5283e3ab4bb5","modified":1458027068200},{"_id":"themes/spfk/layout/_partial/post/showshare.ejs","hash":"d38ea660d51c8c58aa8ad20f225949863152326a","modified":1458027068188},{"_id":"themes/spfk/source/background/bg-13.jpg","hash":"c69a787ff5908ca000a665b021b780559d712a51","modified":1458027068398},{"_id":"themes/spfk/source/background/bg-9.jpg","hash":"2088583629a59758bcaa307469b7bc0e5a258f04","modified":1458027068681},{"_id":"themes/spfk/source/background/bg-8.jpg","hash":"aaaa3b157855ae38741f90be6b86bc20bfd9ff22","modified":1458027068670},{"_id":"themes/spfk/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1458027068216},{"_id":"themes/spfk/source/background/bg-19.jpg","hash":"730c1def0a32f4401dea530bf47e6e182f62c882","modified":1458027068500},{"_id":"themes/spfk/source/background/bg-2.jpg","hash":"d80e0c6c407b21905ecf4975868a4fa596a365a3","modified":1458027068516},{"_id":"themes/spfk/source/background/bg-4.jpg","hash":"4e7c9d2635b76fef261da438d04ed67ead8fc596","modified":1458027068617},{"_id":"themes/spfk/source/background/bg-22.jpg","hash":"ac617667a2451754082318f0a8f7c90eca08265a","modified":1458027068568},{"_id":"themes/spfk/source/background/bg-23.jpg","hash":"71743c170077f137e2c181d098b7208d681eb16e","modified":1458027068585},{"_id":"themes/spfk/source/background/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1458027068692},{"_id":"themes/spfk/source/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1458027069250},{"_id":"themes/spfk/source/background/bg-12.jpg","hash":"7ae4185764aadcf54d7bc49097e16050695a3169","modified":1458027068384},{"_id":"themes/spfk/source/background/bg-6.jpg","hash":"8a27c914e2a827cc317348b3652b56ed7c167980","modified":1458027068648},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1458027069220},{"_id":"themes/spfk/source/background/bg-18.jpg","hash":"a4a714b14b26c1a0e632ed784ba0823e49a3cfc4","modified":1458027068483},{"_id":"themes/spfk/source/background/bg-20.jpg","hash":"b8cbd5d31a181eece81485b2e5066b1c141d007f","modified":1458027068533},{"_id":"themes/spfk/source/background/bg-21.jpg","hash":"1fb9a83d29303aecd3b199b8e92ab2fac5dd4f4c","modified":1458027068551},{"_id":"themes/spfk/source/background/bg-16.jpg","hash":"e10871c60cc2bf0ac8292698ca3dafc381562b4c","modified":1458027068450},{"_id":"public/archives/index.html","hash":"786a5411e1cb3237f6eb81b33e65d56e666c5e4b","modified":1458040704100},{"_id":"public/archives/2016/index.html","hash":"f22f24dffe7e2ab7a3823af383d2de757a72152c","modified":1458040704100},{"_id":"public/archives/2016/03/index.html","hash":"5c955d08f27ea4eb8d0504a6b43406a2e6506174","modified":1458040704101},{"_id":"public/2016/03/13/hello-world/index.html","hash":"4805d85955323d31b1b23460718e194cc31927dc","modified":1458040704101},{"_id":"public/index.html","hash":"57be2228cf27c0995cab91972fc6020e196e6580","modified":1458040704101},{"_id":"public/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1458040704147},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1458040704147},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1458040704148},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1458040704149},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1458040704149},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1458040704149},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1458040704149},{"_id":"public/img/avatar.jpg","hash":"187059af0f1aff7047086f96a0575f7e8cf37e59","modified":1458040704149},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1458040704149},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1458040704150},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1458040704150},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1458040704150},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1458040704150},{"_id":"public/img/guo.jpg","hash":"104c4e372694ae26542e50ff15a28b6bb82838e5","modified":1458040704150},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1458040704150},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1458040704150},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1458040704150},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1458040704150},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1458040704150},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1458040704150},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1458040704151},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1458040704151},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1458040704151},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1458040704151},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1458040704151},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1458040704151},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1458040704151},{"_id":"public/img/favicon.png","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1458040704151},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1458040704152},{"_id":"public/img/head.jpg","hash":"80c0999acfc1173183d3dd243b4b90d077ab97cb","modified":1458040707637},{"_id":"public/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1458040707642},{"_id":"public/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1458040707643},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1458040707643},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1458040707643},{"_id":"public/css/showshare.css","hash":"37e57a6d0c34b68bb4562bafbf98749d9faf7ebf","modified":1458040707663},{"_id":"public/css/loading-style.css","hash":"1f67362d809e85edc9f122db7bc3711af1ed1d8b","modified":1458040707663},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1458040707663},{"_id":"public/css/多说.css","hash":"9bdc9bea4b3e8ddc472526ca75571f26752f3e7d","modified":1458040707663},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1458040707664},{"_id":"public/js/TweenMax.js","hash":"0ba64564a4fde4085fa3971dd53b7d64a41751e1","modified":1458040707664},{"_id":"public/js/clipboard.min.js","hash":"c13b4bb8fee46447284590d2afc0efca0ea3cb7b","modified":1458040707664},{"_id":"public/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1458040707664},{"_id":"public/js/mobile.js","hash":"d3847e5bcaf39108931724ecb02770c62b10889f","modified":1458040707664},{"_id":"public/js/main.js","hash":"153b4796d6c22f3bfaa28a4f8a361d4685286c6f","modified":1458040707665},{"_id":"public/js/pc.js","hash":"ab375af6e3bcd054b1e87e1a8dcd3d7d25c2db40","modified":1458040707665},{"_id":"public/js/plugins.js","hash":"c1cf96b2d852b5803228a34d99014b005623bc06","modified":1458040707665},{"_id":"public/css/pace/pace-theme-flash.css","hash":"508bce8b59a1fbc1f1443a7c4ab3b026e5517dab","modified":1458040707665},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1458040707665},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1458040707665},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1458040707665},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1458040707665},{"_id":"public/js/404/jquery.parallaxify-0.0.2.min.js","hash":"b97e2dfcb210b76f7bdd6e1800b26128bf4fad99","modified":1458040707665},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1458040707665},{"_id":"public/css/style.css","hash":"b8481b1f24c1820c4cd7cbd421ffca9e34f36caf","modified":1458040707665},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1458040707665},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1458040707666},{"_id":"public/js/pace.js","hash":"b49c10cd65d9488f7338e3c778e55ac6628650f3","modified":1458040707666},{"_id":"public/js/TweenMax.min.js","hash":"eaa4e4a08400da3f22dedda706ba56cdce5b0b7a","modified":1458040707666},{"_id":"public/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1458040707666},{"_id":"public/js/404/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1458040707666},{"_id":"public/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1458040707666},{"_id":"public/background/bg-3.jpg","hash":"93dc868d22d60de1376e7f8d168a11d598dd7ee4","modified":1458040707666},{"_id":"public/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1458040707666},{"_id":"public/background/bg-11.jpg","hash":"bbbd86ccd05be0426d3ec79c892e20324b16d345","modified":1458040707677},{"_id":"public/background/bg-10.jpg","hash":"204b173179995ff3b2e47e22c50e9afcbe54b700","modified":1458040707677},{"_id":"public/background/bg-14.jpg","hash":"ca3d16a7a3e74cc7329610860f6a9657f57b4c5c","modified":1458040707678},{"_id":"public/background/bg-17.jpg","hash":"827ea862f01b3c0717c8c20d177ecb5862f61c76","modified":1458040707678},{"_id":"public/background/bg-7.jpg","hash":"150a094442b547b3c1af2198e0887a667594e547","modified":1458040707678},{"_id":"public/background/bg-15.jpg","hash":"e3065004c297c2c421eced09a37bed02901f80bd","modified":1458040707690},{"_id":"public/background/bg-1.jpg","hash":"919f3cb49be09cbc54d96ab3c8c3428867f29e3c","modified":1458040707690},{"_id":"public/background/bg-5.jpg","hash":"2cfa6f688b60992a8efee8f4c43fb1971f8528aa","modified":1458040707691},{"_id":"public/background/bg-13.jpg","hash":"c69a787ff5908ca000a665b021b780559d712a51","modified":1458040707717},{"_id":"public/background/bg-9.jpg","hash":"2088583629a59758bcaa307469b7bc0e5a258f04","modified":1458040707717},{"_id":"public/background/bg-8.jpg","hash":"aaaa3b157855ae38741f90be6b86bc20bfd9ff22","modified":1458040707718},{"_id":"public/font-awesome/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1458040707721},{"_id":"public/background/bg-19.jpg","hash":"730c1def0a32f4401dea530bf47e6e182f62c882","modified":1458040707734},{"_id":"public/background/bg-2.jpg","hash":"d80e0c6c407b21905ecf4975868a4fa596a365a3","modified":1458040707734},{"_id":"public/background/bg-4.jpg","hash":"4e7c9d2635b76fef261da438d04ed67ead8fc596","modified":1458040707734},{"_id":"public/background/bg-22.jpg","hash":"ac617667a2451754082318f0a8f7c90eca08265a","modified":1458040707739},{"_id":"public/background/bg-23.jpg","hash":"71743c170077f137e2c181d098b7208d681eb16e","modified":1458040707739},{"_id":"public/background/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1458040707740},{"_id":"public/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1458040707740},{"_id":"public/background/bg-12.jpg","hash":"7ae4185764aadcf54d7bc49097e16050695a3169","modified":1458040707801},{"_id":"public/background/bg-6.jpg","hash":"8a27c914e2a827cc317348b3652b56ed7c167980","modified":1458040707801},{"_id":"public/background/bg-18.jpg","hash":"a4a714b14b26c1a0e632ed784ba0823e49a3cfc4","modified":1458040707813},{"_id":"public/background/bg-20.jpg","hash":"b8cbd5d31a181eece81485b2e5066b1c141d007f","modified":1458040707813},{"_id":"public/background/bg-21.jpg","hash":"1fb9a83d29303aecd3b199b8e92ab2fac5dd4f4c","modified":1458040707813},{"_id":"public/background/bg-16.jpg","hash":"e10871c60cc2bf0ac8292698ca3dafc381562b4c","modified":1458040707826}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"React基础知识详解","_content":"\n> **编者按：**除组件化、虚拟DOM在复用以及性能上带来的一般好处外，React思想使得开发者之间更好的分工与合作，在配合上非常顺畅，规范的接口以及极强的约束，使得整个代码结构清晰，不同开发者的代码高度一致。\n\n课程示例代码请前往：https://github.com/zhufengreact/zhufeng-react-tutorial\n\n## 0. 本次课程大纲\n\n课程主线如下：\n\n- React是什么\nreact 是一个做 UI 的库，具体来说是做 UI 组件的库，专注于做 mvc 中的 v.\n- 为什么学React\napi 少，类库易学\n组件内聚，易于组合\n原生组件和自定义组件融合渲染\n状态/属性驱动全局更新，不用关注细节更新\nES6 webpack ... 生态圈/工具链完善\n- 怎么用React（`本次课程的核心内容，分9个部分`）\n\n**提前告知，本次课程的示例采用ES6来写React组件代码，需要明确以下几点：**\n\n- 不支持getInitialState，如需在constructor通过this.state={}赋值，也可直接作为properties定义\n- propTypes、defaultProps 作为properties定义。\n- 不支持mixins，可以使用decorator\n\n## 1. React相关文件顶层api的介绍\n\n最简单的React组件及其渲染\n```\nimport React, { Component } from 'react';\n\n/**\n * 最简单的一个组件\n */\nclass SimpleComponent extends Component {\n  render(){\n    return <div> here we go </div>;\n  }\n}\n\n// 我们可以看看React给我们提供了哪些顶层组件\nconsole.log( React );\n\nexport default SimpleComponent;\n```\n\n### react.js\nReact.Component 使用ES6的class创建组件用的API<br>\nReact.createClass 使用ES5的class创建组件用的API<br>\nReact.PropTypes<br>\nReact.Children 操作 map/forEach children 工具类<br>\n\n还有几个不是很常用的<br>\nReact.createElement<br>\nReact.cloneElement<br>\nReact.createFactory<br>\nReact.DOM\n\n### react-dom.js\nReactDOM.render 渲染组件到 dom<br>\nReactDOM.unmountComponentAtNode<br>\nReactDOM.findDOMNode<br>\n\n### react-dom-server.js\nReactDOMServer.renderToString<br>\nReactDOMServer.renderToStaticMarkup<br>\n\n## 2. jsx语法\n\n类似 xml 的语法，用来描述组件树\n```\n<div classname=\"x\">\n  <a href=\"#\">#</a>\n    <component x=\"y\">1</component>\n</div>\n```\n不用JSX，用React提供的API写的话\n```\nReact.createElement('div',{\n  className:'x'\n    },[\n    React.createElement('a',{href:'#'},'#'),\n    React.createElement(Component,{x:'y'},1);\n]);\n```\n\n### 2.1 注释、命名、根元素个数、JSX 嵌入变量\n```\nimport React, { Component } from 'react';\n\n// 1. 组件命名遵循驼峰命名，首字母大写\nclass ComponentDemo extends Component {\n  render(){\n    {\n      /*\n      2. 这是代码注释\n      也可以是多行\n      */\n    }\n    const name = this.props.name;\n\n    // 3. render 方法 return 回来的根元素只能是一个，超过会报错\n    // 4. { } 里面可以写JS代码\n    return (\n      <div>\n        hello, {name ? name : \"我是默认的\"}\n      </div>\n    );\n  }\n}\n\nexport default ComponentDemo;\n```\n\n- React只有一个限制， 组件只能渲染单个根节点。如果你想要返回多个节点，它们必须被包含在同一个节点里。\n\n### 2.2 styles\n```\nimport React, { Component } from 'react';\n\nclass StyleDemo extends Component {\n  render(){\n    // 5. 在JS文件里面给组件定义样式\n    var MyComponentStyles = {\n        color: 'blue',\n        fontSize: '28px'\n    };\n\n    return (\n      <div style={MyComponentStyles}>\n          可以直接这样写行内样式\n      </div>\n    )\n  }\n}\n\nexport default StyleDemo;\n```\n### 2.3  JSX SPREAD\n可以用通过 {...obj} 来批量设置一个对象的键值对到组件的属性，注意顺序\n```\nimport React, { Component } from 'react';\n\nclass SpreadDemo extends Component {\n  componentWillMount(){\n    console.log(this.props);\n  }\n  render(){\n    return <h1> {this.props.name} is a {this.props.type} </h1>;\n  }\n}\n\nexport default SpreadDemo;\n\n```\n### 2.4 属性名不能和 js 关键字冲突\n\n例如：className, readOnly, htmlfor\n\n\n## 3. 数据流：state props propType\n\n### 3.1 state && setState\n用状态控制组件变化\n可以把一个组件看做一个状态机, 每一次状态对应于组件的一个 ui\n\n**组件内部的状态，可以使用 state**\n\n```\nimport React, { Component } from 'react';\n\nclass StateDemo extends Component {\n\n  state = {\n    secondsElapsed: 0\n  }\n\n  tick(){\n    this.setState({ secondsElapsed: this.state.secondsElapsed + 1 });\n  }\n\n  componentDidMount(){\n    this.interval = setInterval( this.tick.bind(this), 1000 );\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.interval);\n  }\n\n  render(){\n    return (\n      <div>目前已经计时：{this.state.secondsElapsed}秒</div>\n    )\n  }\n}\n\nexport default StateDemo;\n\n```\n\n\n### 3.2 props\n通过 this.props 可以获取传递给该组件的属性值，还可以通过定义 getDefaultProps 来指定默认属性值（这是ES5的写法，ES6定义组件的默认props可以直接写props）\n\n下面几个是props的常用API：\n- `this.props.children`\n- `this.props.map`\n- `this.props.filter`\n\n**props是调用组件的时候传递进去的数据，一般用于组件树数据传递**\n\n```\nimport React, { Component } from 'react';\n\nclass PropsDemo extends Component {\n  props = {\n    title: '这是默认的title属性值'\n  }\n  render(){\n    console.log(this.props);\n\n    return <b>{this.props.title}</b>\n  }\n}\n\nexport default PropsDemo;\n\n\n// 组件调用方式\n// <PropsDemo title=\"设置的标题\" />\n```\n\n### 3.3 propTypes\n通过指定 propTypes 可以校验props属性值的类型，校验可提升开发者体验，用于约定统一的接口规范。\n\n```\nimport React, { Component, PropTypes } from 'react';\n\nclass PropTypesDemo extends Component {\n\n  static propTypes = {\n    title: PropTypes.string.isRequired\n  }\n\n  props = {\n      title: '默认的title'\n  }\n\n  render(){\n    return <b>{this.props.title}</b>\n  }\n}\n\nexport default PropTypesDemo;\n\n```\n\n## 4. 调用API定义组件\n\n用 React.createClass或者React.Component 定义组件时允许传入相应的配置及组件API的使用，包括组件生命周期提供的一系列钩子函数。\n\n### 4.1 组件初始定义\n\n- getDefaultProps 得到默认属性对象，这个在ES6的时候不需要这样定义\n- propTypes 属性检验规则\n- mixins 组件间公用方法\n\n\n### 4.2 初次创建组件时调用\n\n- getInitialState 得到初始状态对象\n- render 返回组件树. 必须设置\n- componentDidMount 渲染到 dom 树中是调用，只在客户端调用，可用于获取原生节点\n\n### 4.3 组件的属性值改变时调用\n\n- componentWillReceiveProps 属性改变调用\n- shouldComponentUpdate 判断是否需要重新渲染\n- render 返回组件树. 必须设置\n- componentDidUpdate 渲染到 dom 树中是调用, 可用于获取原生节点\n\n### 4.4 销毁组件\n- componentWillUnmount 组件从 dom 销毁前调用\n\n### 4.5 示例诠释组件全生命周期\n\n```\nimport React, { Component } from 'react';\n\nclass LifeCycle extends Component {\n\n  props = {\n    value: '开始渲染'\n  }\n\n  componentWillReceiveProps(nextProps){\n    console.log('componentWillReceiveProps');\n    this.setState({\n        value: nextProps.value\n    });\n  }\n\n  shouldComponentUpdate(nextProps,nextState){\n    console.log('shouldComponentUpdate');\n    return true;\n  }\n\n  componentWillUpdate(nextProps,nextState){\n    console.log('componentWillUpdate');\n  }\n\n  componentWillMount(){\n    console.log('componentWillMount');\n  }\n\n  render() {\n    console.log('render');\n    return <span>{this.props.value}</span>\n  }\n\n  componentDidMount() {\n      console.log('componentDidMount');\n  }\n\n  componentDidUpdate(prevProps,prevState) {\n      console.log('componentDidUpdate');\n  }\n\n  componentWillUnmount(prevProps,prevState) {\n      console.log('componentWillUnmount');\n  }\n}\n\nexport default LifeCycle;\n\n```\n\n调用组件并销毁组件示例\n```\nimport React, { Component } from 'react';\nimport LifeCycleDemo from './LifeCycleDemo';\n\nclass DestroyComponent extends Component {\n\n  state = {\n    value:1,\n    destroyed:false\n  }\n\n  increase = () => {\n    this.setState({\n      value: this.state.value + 1\n    });\n  }\n\n  destroy = () => {\n    this.setState({\n      destroyed: true\n    });\n  }\n\n  render() {\n    if(this.state.destroyed){\n        return null;\n    }\n\n    return <div>\n      <p>\n        <button onClick={this.increase}>每次加1</button>\n        <button onClick={this.destroy}>干掉这两个按钮</button>\n      </p>\n      <LifeCycleDemo value={this.state.value}/>\n    </div>;\n  }\n}\n\nexport default DestroyComponent;\n\n```\n\n### 4.6 回顾组件的渲染过程\n```\n# 创建-》渲染-》销毁\n\ngetDefaultProps()\ngetInitialState()\ncomponentWillMount()\nrender()\ncomponentDidMount()\ncomponentWillUnmount()\n\n# 更新组件\n\ncomponentWillReceiveProps()\nshouldComponentUpdate()\ncomponentWillUpdate()\nrender()\ncomponentDidUpdate()\n```\n## 5. 使用ref对操作DOM\n\n- React.findDOMNode\n- this.refs.xxx\n\n获取DOM后可以方便结合现有非 react 类库的使用，通过 ref/refs 可以取得组件实例，进而取得原生节点，不过尽量通过 state/props 更新组件，不要使用该功能去更新组件的DOM。\n\n```\nimport React, { Component } from 'react';\nimport ReactDOM, { findDOMNode } from 'react-dom';\n\nclass HandleDOMComponent extends Component {\n  componentDidMount(){\n    // 两种方式都可以获取到元素\n    let ele = findDOMNode(this.refs.content);\n    let ele2 = this.refs.content;\n\n    // 如果想用 jquery，那么这是个好时机\n    console.log( ele );\n    console.log( ele.innerHTML );\n    console.log( ele2.innerHTML );\n\n  }\n\n  render(){\n    return (\n      <div>\n        <h3>来吧，一起操作DOM</h3>\n        <div ref='content'>这是我DOM元素里面的内容</div>\n      </div>\n    );\n  }\n}\n\nexport default HandleDOMComponent;\n\n```\n## 6. 事件event\n\n可以通过设置原生 dom 组件的 onEventType 属性来监听 dom 事件，例如 onClick, onMouseDown，在加强组件内聚性的同时，避免了传统 html 的全局变量污染\n\n```\n'use strict';\n\nimport React, { Component } from 'react';\n\nclass HandleEvent extends Component {\n\n  state = { liked: false }\n\n  handleClick = (event) => {\n    this.setState({liked: !this.state.liked});\n  }\n\n  render() {\n    let text = this.state.liked ? '喜欢' : '不喜欢';\n\n    return (\n      <p onClick={this.handleClick}>\n        我 {text} 你.\n      </p>\n    );\n  }\n}\n\nexport default HandleEvent;\n\n```\n\n**注意：事件回调函数参数为标准化的事件对象，可以不用考虑 IE**\n\n更多事件我们可以一起看[这里](http://reactjs.cn/react/docs/events.html#form-events)\n\n## 7. 组件的组合\n\n### 7.1 受限组件 && 非受限组件\n\n受限组件示例：\n```\nrender() {\n  return <input type=\"text\" value=\"Hello!\" />;\n}\n```\n非受限组件示例：\n```\nrender() {\n  return <input type=\"text\" />;\n}\n```\n### 7.2 使用自定义的组件\n```\n'use strict';\n\nimport React, { Component } from 'react';\n\nclass ComponentA extends Component {\n  render() {\n    return <a href='#'>我是组件A<br/></a>\n  }\n}\n\nclass ComponentB extends Component {\n  render() {\n    return <a href='#'>我是组件B</a>\n  }\n}\n\n\nclass SelfCreateComponent extends Component {\n  render() {\n    return (\n      <i>\n        <ComponentA />\n        <ComponentB />\n      </i>\n    );\n  }\n}\n\nexport default SelfCreateComponent;\n\n```\n### 7.3 组合 CHILDREN\n自定义组件中可以通过 this.props.children 访问自定义组件的子节点\n```\n'use strict';\n\nimport React, { Component } from 'react';\n\n// 定义一个组件，通过React.Children 拿到组件里面的子元素\nclass ListComponent extends Component {\n  render(){\n    return <ul>\n      {\n        React.Children.map( this.props.children, function(c){\n          return <li>{c}</li>;\n        })\n      }\n    </ul>\n  }\n}\n\nclass UseChildrenComponent extends Component {\n  render(){\n    return (\n      <ListComponent>\n        <a href=\"#\">Facebook</a>\n        <a href=\"#\">Google</a>\n        <a href=\"#\">SpaceX</a>\n      </ListComponent>\n    )\n  }\n}\n\nexport default UseChildrenComponent;\n\n```\n## 8. form表单操作\n\n### 8.1 React表单组件和 html 的不同点\n- value/checked 属性设置后，用户输入无效\n- textarea 的值要设置在 value 属性\n```\n<textarea name=\"description\" value=\"This is a description.\" />\n```\n- select 的 value 属性可以是数组，不建议使用 option 的 selected 属性\n```\n<select multiple={true} value={['B', 'C']}>\n   <option value=\"A\">Apple</option>\n   <option value=\"B\">Banana</option>\n   <option value=\"C\">Cranberry</option>\n </select>\n```\n- input/textarea 的 onChange 用户每次输入都会触发（即使不失去焦点）\n- radio/checkbox/option 点击后触发 onChange\n\n### 8.2 综合表达组件示例\n\n1.定义复选框组件Checkboxes\n```\nimport React, { Component } from 'react';\n\nclass Checkboxes extends Component {\n  render(){\n      return <span>\n          A\n          <input onChange={this.props.handleCheck}  name=\"goodCheckbox\" type=\"checkbox\" value=\"A\"/>\n          B\n          <input onChange={this.props.handleCheck} name=\"goodCheckbox\" type=\"checkbox\" value=\"B\" />\n          C\n          <input onChange={this.props.handleCheck} name=\"goodCheckbox\" type=\"checkbox\" value=\"C\" />\n      </span>\n  }\n}\n\nexport default Checkboxes;\n\n```\n\n\n2.定义单选框按钮组RadioButtons\n```\n\nimport React, { Component } from 'react';\n\nclass RadioButtons extends Component {\n  saySomething(){\n      alert(\"我是一个很棒的单选框按钮组\");\n  }\n  render(){\n      return <span>\n          A\n          <input onChange={this.props.handleRadio} name=\"goodRadio\" type=\"radio\" value=\"A\"/>\n          B\n          <input onChange={this.props.handleRadio} name=\"goodRadio\" type=\"radio\" defaultChecked value=\"B\"/>\n          C\n          <input onChange={this.props.handleRadio} name=\"goodRadio\" type=\"radio\" value=\"C\"/>\n      </span>\n  }\n}\n\nexport default RadioButtons;\n\n```\n\n3.FormApp组件集成两个组件并处理表单逻辑\n```\n'use strict';\n\nimport React, { Component } from 'react';\nimport Checkboxes from './Checkboxes';\nimport RadioButtons from './RadioButtons';\n\nclass FormApp extends Component {\n\n  state = {\n      inputValue: '请输入...',\n      selectValue: 'A',\n      radioValue:'B',\n      checkValues:[],\n      textareaValue:'请输入...'\n  }\n\n  handleSubmit = (e) => {\n      e.preventDefault();\n\n      let formData = {\n          input: this.refs.goodInput.value,\n          select: this.refs.goodSelect.value,\n          textarea: this.refs.goodTextarea.value,\n          radio: this.state.radioValue,\n          check: this.state.checkValues,\n      }\n\n      alert('您即将提交表单')\n      console.log('你提交的数据是:')\n      console.log(formData);\n\n  }\n\n  handleRadio = (e) => {\n      this.setState({\n          radioValue: e.target.value,\n      })\n  }\n\n  handleCheck = (e) => {\n      let checkValues = this.state.checkValues.slice();\n      let newVal = e.target.value;\n      let index = checkValues.indexOf(newVal);\n\n      if( index == -1 ){\n          checkValues.push( newVal )\n      }else{\n          checkValues.splice(index,1);\n      }\n\n      this.setState({\n          checkValues: checkValues,\n      })\n  }\n\n  render(){\n      return <form onSubmit={this.handleSubmit}>\n          <h3> 请输入内容 </h3>\n          <input ref=\"goodInput\" type=\"text\" defaultValue={this.state.inputValue }/>\n          <br/>\n\n          <h3> 请选择 </h3>\n          <select defaultValue={ this.state.selectValue } ref=\"goodSelect\">\n              <option value=\"A\">A</option>\n              <option value=\"B\">B</option>\n              <option value=\"C\">C</option>\n              <option value=\"D\">D</option>\n              <option value=\"E\">E</option>\n          </select>\n          <br/>\n\n          <h3> 单项选择 </h3>\n          <RadioButtons ref=\"goodRadio\" handleRadio={this.handleRadio} />\n          <br/>\n\n          <h3> 多选按钮 </h3>\n          <Checkboxes handleCheck={this.handleCheck} />\n          <br/>\n\n          <h3> 反馈建议 </h3>\n          <textarea defaultValue={this.state.textareaValue} ref=\"goodTextarea\"></textarea>\n          <br/>\n\n          <button type=\"submit\">确认提交</button>\n      </form>\n  }\n}\n\nexport default FormApp;\n\n```\n\n## 9. mixin共享\n\nmixin 是一个普通对象，通过 mixin 可以在不同组件间共享代码，使你的React程序变得更为可重用。注意，ES6语法不支持mixin写法，而是可以通过decorator去实现代码共享，这里使用ES5语法做示例说明。\n```\n\nimport React from 'react';\n\nvar SetIntervalMixin = {\n  componentWillMount: function() {\n    this.intervals = [];\n  },\n  setInterval: function() {\n    this.intervals.push(setInterval.apply(null, arguments));\n  },\n  componentWillUnmount: function() {\n    this.intervals.forEach(clearInterval);\n  }\n};\n\nvar MixinDemo = React.createClass({\n  // Use the mixin\n  mixins: [SetIntervalMixin],\n  getInitialState: function() {\n    return {seconds: 0};\n  },\n  componentDidMount: function() {\n    // Call a method on the mixin\n    this.setInterval(this.tick, 1000);\n  },\n  tick: function() {\n    this.setState({seconds: this.state.seconds + 1});\n  },\n  render: function() {\n    return (\n      <p>\n        计时器已经运行了： {this.state.seconds} 秒.\n      </p>\n    );\n  }\n});\n\nexport default MixinDemo;\n\n```\n\n## 基础部分完结寄语\n\n总结起来，学习的难度不高，以上内容掌握后，基本能够进行React的开发，后续我们继续相关内容的讲解，内容预告：一步步教你如何用React写一个简单完整的应用功能。\n","source":"_posts/hello-world.md","raw":"---\ntitle: React基础知识详解\n---\n\n> **编者按：**除组件化、虚拟DOM在复用以及性能上带来的一般好处外，React思想使得开发者之间更好的分工与合作，在配合上非常顺畅，规范的接口以及极强的约束，使得整个代码结构清晰，不同开发者的代码高度一致。\n\n课程示例代码请前往：https://github.com/zhufengreact/zhufeng-react-tutorial\n\n## 0. 本次课程大纲\n\n课程主线如下：\n\n- React是什么\nreact 是一个做 UI 的库，具体来说是做 UI 组件的库，专注于做 mvc 中的 v.\n- 为什么学React\napi 少，类库易学\n组件内聚，易于组合\n原生组件和自定义组件融合渲染\n状态/属性驱动全局更新，不用关注细节更新\nES6 webpack ... 生态圈/工具链完善\n- 怎么用React（`本次课程的核心内容，分9个部分`）\n\n**提前告知，本次课程的示例采用ES6来写React组件代码，需要明确以下几点：**\n\n- 不支持getInitialState，如需在constructor通过this.state={}赋值，也可直接作为properties定义\n- propTypes、defaultProps 作为properties定义。\n- 不支持mixins，可以使用decorator\n\n## 1. React相关文件顶层api的介绍\n\n最简单的React组件及其渲染\n```\nimport React, { Component } from 'react';\n\n/**\n * 最简单的一个组件\n */\nclass SimpleComponent extends Component {\n  render(){\n    return <div> here we go </div>;\n  }\n}\n\n// 我们可以看看React给我们提供了哪些顶层组件\nconsole.log( React );\n\nexport default SimpleComponent;\n```\n\n### react.js\nReact.Component 使用ES6的class创建组件用的API<br>\nReact.createClass 使用ES5的class创建组件用的API<br>\nReact.PropTypes<br>\nReact.Children 操作 map/forEach children 工具类<br>\n\n还有几个不是很常用的<br>\nReact.createElement<br>\nReact.cloneElement<br>\nReact.createFactory<br>\nReact.DOM\n\n### react-dom.js\nReactDOM.render 渲染组件到 dom<br>\nReactDOM.unmountComponentAtNode<br>\nReactDOM.findDOMNode<br>\n\n### react-dom-server.js\nReactDOMServer.renderToString<br>\nReactDOMServer.renderToStaticMarkup<br>\n\n## 2. jsx语法\n\n类似 xml 的语法，用来描述组件树\n```\n<div classname=\"x\">\n  <a href=\"#\">#</a>\n    <component x=\"y\">1</component>\n</div>\n```\n不用JSX，用React提供的API写的话\n```\nReact.createElement('div',{\n  className:'x'\n    },[\n    React.createElement('a',{href:'#'},'#'),\n    React.createElement(Component,{x:'y'},1);\n]);\n```\n\n### 2.1 注释、命名、根元素个数、JSX 嵌入变量\n```\nimport React, { Component } from 'react';\n\n// 1. 组件命名遵循驼峰命名，首字母大写\nclass ComponentDemo extends Component {\n  render(){\n    {\n      /*\n      2. 这是代码注释\n      也可以是多行\n      */\n    }\n    const name = this.props.name;\n\n    // 3. render 方法 return 回来的根元素只能是一个，超过会报错\n    // 4. { } 里面可以写JS代码\n    return (\n      <div>\n        hello, {name ? name : \"我是默认的\"}\n      </div>\n    );\n  }\n}\n\nexport default ComponentDemo;\n```\n\n- React只有一个限制， 组件只能渲染单个根节点。如果你想要返回多个节点，它们必须被包含在同一个节点里。\n\n### 2.2 styles\n```\nimport React, { Component } from 'react';\n\nclass StyleDemo extends Component {\n  render(){\n    // 5. 在JS文件里面给组件定义样式\n    var MyComponentStyles = {\n        color: 'blue',\n        fontSize: '28px'\n    };\n\n    return (\n      <div style={MyComponentStyles}>\n          可以直接这样写行内样式\n      </div>\n    )\n  }\n}\n\nexport default StyleDemo;\n```\n### 2.3  JSX SPREAD\n可以用通过 {...obj} 来批量设置一个对象的键值对到组件的属性，注意顺序\n```\nimport React, { Component } from 'react';\n\nclass SpreadDemo extends Component {\n  componentWillMount(){\n    console.log(this.props);\n  }\n  render(){\n    return <h1> {this.props.name} is a {this.props.type} </h1>;\n  }\n}\n\nexport default SpreadDemo;\n\n```\n### 2.4 属性名不能和 js 关键字冲突\n\n例如：className, readOnly, htmlfor\n\n\n## 3. 数据流：state props propType\n\n### 3.1 state && setState\n用状态控制组件变化\n可以把一个组件看做一个状态机, 每一次状态对应于组件的一个 ui\n\n**组件内部的状态，可以使用 state**\n\n```\nimport React, { Component } from 'react';\n\nclass StateDemo extends Component {\n\n  state = {\n    secondsElapsed: 0\n  }\n\n  tick(){\n    this.setState({ secondsElapsed: this.state.secondsElapsed + 1 });\n  }\n\n  componentDidMount(){\n    this.interval = setInterval( this.tick.bind(this), 1000 );\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.interval);\n  }\n\n  render(){\n    return (\n      <div>目前已经计时：{this.state.secondsElapsed}秒</div>\n    )\n  }\n}\n\nexport default StateDemo;\n\n```\n\n\n### 3.2 props\n通过 this.props 可以获取传递给该组件的属性值，还可以通过定义 getDefaultProps 来指定默认属性值（这是ES5的写法，ES6定义组件的默认props可以直接写props）\n\n下面几个是props的常用API：\n- `this.props.children`\n- `this.props.map`\n- `this.props.filter`\n\n**props是调用组件的时候传递进去的数据，一般用于组件树数据传递**\n\n```\nimport React, { Component } from 'react';\n\nclass PropsDemo extends Component {\n  props = {\n    title: '这是默认的title属性值'\n  }\n  render(){\n    console.log(this.props);\n\n    return <b>{this.props.title}</b>\n  }\n}\n\nexport default PropsDemo;\n\n\n// 组件调用方式\n// <PropsDemo title=\"设置的标题\" />\n```\n\n### 3.3 propTypes\n通过指定 propTypes 可以校验props属性值的类型，校验可提升开发者体验，用于约定统一的接口规范。\n\n```\nimport React, { Component, PropTypes } from 'react';\n\nclass PropTypesDemo extends Component {\n\n  static propTypes = {\n    title: PropTypes.string.isRequired\n  }\n\n  props = {\n      title: '默认的title'\n  }\n\n  render(){\n    return <b>{this.props.title}</b>\n  }\n}\n\nexport default PropTypesDemo;\n\n```\n\n## 4. 调用API定义组件\n\n用 React.createClass或者React.Component 定义组件时允许传入相应的配置及组件API的使用，包括组件生命周期提供的一系列钩子函数。\n\n### 4.1 组件初始定义\n\n- getDefaultProps 得到默认属性对象，这个在ES6的时候不需要这样定义\n- propTypes 属性检验规则\n- mixins 组件间公用方法\n\n\n### 4.2 初次创建组件时调用\n\n- getInitialState 得到初始状态对象\n- render 返回组件树. 必须设置\n- componentDidMount 渲染到 dom 树中是调用，只在客户端调用，可用于获取原生节点\n\n### 4.3 组件的属性值改变时调用\n\n- componentWillReceiveProps 属性改变调用\n- shouldComponentUpdate 判断是否需要重新渲染\n- render 返回组件树. 必须设置\n- componentDidUpdate 渲染到 dom 树中是调用, 可用于获取原生节点\n\n### 4.4 销毁组件\n- componentWillUnmount 组件从 dom 销毁前调用\n\n### 4.5 示例诠释组件全生命周期\n\n```\nimport React, { Component } from 'react';\n\nclass LifeCycle extends Component {\n\n  props = {\n    value: '开始渲染'\n  }\n\n  componentWillReceiveProps(nextProps){\n    console.log('componentWillReceiveProps');\n    this.setState({\n        value: nextProps.value\n    });\n  }\n\n  shouldComponentUpdate(nextProps,nextState){\n    console.log('shouldComponentUpdate');\n    return true;\n  }\n\n  componentWillUpdate(nextProps,nextState){\n    console.log('componentWillUpdate');\n  }\n\n  componentWillMount(){\n    console.log('componentWillMount');\n  }\n\n  render() {\n    console.log('render');\n    return <span>{this.props.value}</span>\n  }\n\n  componentDidMount() {\n      console.log('componentDidMount');\n  }\n\n  componentDidUpdate(prevProps,prevState) {\n      console.log('componentDidUpdate');\n  }\n\n  componentWillUnmount(prevProps,prevState) {\n      console.log('componentWillUnmount');\n  }\n}\n\nexport default LifeCycle;\n\n```\n\n调用组件并销毁组件示例\n```\nimport React, { Component } from 'react';\nimport LifeCycleDemo from './LifeCycleDemo';\n\nclass DestroyComponent extends Component {\n\n  state = {\n    value:1,\n    destroyed:false\n  }\n\n  increase = () => {\n    this.setState({\n      value: this.state.value + 1\n    });\n  }\n\n  destroy = () => {\n    this.setState({\n      destroyed: true\n    });\n  }\n\n  render() {\n    if(this.state.destroyed){\n        return null;\n    }\n\n    return <div>\n      <p>\n        <button onClick={this.increase}>每次加1</button>\n        <button onClick={this.destroy}>干掉这两个按钮</button>\n      </p>\n      <LifeCycleDemo value={this.state.value}/>\n    </div>;\n  }\n}\n\nexport default DestroyComponent;\n\n```\n\n### 4.6 回顾组件的渲染过程\n```\n# 创建-》渲染-》销毁\n\ngetDefaultProps()\ngetInitialState()\ncomponentWillMount()\nrender()\ncomponentDidMount()\ncomponentWillUnmount()\n\n# 更新组件\n\ncomponentWillReceiveProps()\nshouldComponentUpdate()\ncomponentWillUpdate()\nrender()\ncomponentDidUpdate()\n```\n## 5. 使用ref对操作DOM\n\n- React.findDOMNode\n- this.refs.xxx\n\n获取DOM后可以方便结合现有非 react 类库的使用，通过 ref/refs 可以取得组件实例，进而取得原生节点，不过尽量通过 state/props 更新组件，不要使用该功能去更新组件的DOM。\n\n```\nimport React, { Component } from 'react';\nimport ReactDOM, { findDOMNode } from 'react-dom';\n\nclass HandleDOMComponent extends Component {\n  componentDidMount(){\n    // 两种方式都可以获取到元素\n    let ele = findDOMNode(this.refs.content);\n    let ele2 = this.refs.content;\n\n    // 如果想用 jquery，那么这是个好时机\n    console.log( ele );\n    console.log( ele.innerHTML );\n    console.log( ele2.innerHTML );\n\n  }\n\n  render(){\n    return (\n      <div>\n        <h3>来吧，一起操作DOM</h3>\n        <div ref='content'>这是我DOM元素里面的内容</div>\n      </div>\n    );\n  }\n}\n\nexport default HandleDOMComponent;\n\n```\n## 6. 事件event\n\n可以通过设置原生 dom 组件的 onEventType 属性来监听 dom 事件，例如 onClick, onMouseDown，在加强组件内聚性的同时，避免了传统 html 的全局变量污染\n\n```\n'use strict';\n\nimport React, { Component } from 'react';\n\nclass HandleEvent extends Component {\n\n  state = { liked: false }\n\n  handleClick = (event) => {\n    this.setState({liked: !this.state.liked});\n  }\n\n  render() {\n    let text = this.state.liked ? '喜欢' : '不喜欢';\n\n    return (\n      <p onClick={this.handleClick}>\n        我 {text} 你.\n      </p>\n    );\n  }\n}\n\nexport default HandleEvent;\n\n```\n\n**注意：事件回调函数参数为标准化的事件对象，可以不用考虑 IE**\n\n更多事件我们可以一起看[这里](http://reactjs.cn/react/docs/events.html#form-events)\n\n## 7. 组件的组合\n\n### 7.1 受限组件 && 非受限组件\n\n受限组件示例：\n```\nrender() {\n  return <input type=\"text\" value=\"Hello!\" />;\n}\n```\n非受限组件示例：\n```\nrender() {\n  return <input type=\"text\" />;\n}\n```\n### 7.2 使用自定义的组件\n```\n'use strict';\n\nimport React, { Component } from 'react';\n\nclass ComponentA extends Component {\n  render() {\n    return <a href='#'>我是组件A<br/></a>\n  }\n}\n\nclass ComponentB extends Component {\n  render() {\n    return <a href='#'>我是组件B</a>\n  }\n}\n\n\nclass SelfCreateComponent extends Component {\n  render() {\n    return (\n      <i>\n        <ComponentA />\n        <ComponentB />\n      </i>\n    );\n  }\n}\n\nexport default SelfCreateComponent;\n\n```\n### 7.3 组合 CHILDREN\n自定义组件中可以通过 this.props.children 访问自定义组件的子节点\n```\n'use strict';\n\nimport React, { Component } from 'react';\n\n// 定义一个组件，通过React.Children 拿到组件里面的子元素\nclass ListComponent extends Component {\n  render(){\n    return <ul>\n      {\n        React.Children.map( this.props.children, function(c){\n          return <li>{c}</li>;\n        })\n      }\n    </ul>\n  }\n}\n\nclass UseChildrenComponent extends Component {\n  render(){\n    return (\n      <ListComponent>\n        <a href=\"#\">Facebook</a>\n        <a href=\"#\">Google</a>\n        <a href=\"#\">SpaceX</a>\n      </ListComponent>\n    )\n  }\n}\n\nexport default UseChildrenComponent;\n\n```\n## 8. form表单操作\n\n### 8.1 React表单组件和 html 的不同点\n- value/checked 属性设置后，用户输入无效\n- textarea 的值要设置在 value 属性\n```\n<textarea name=\"description\" value=\"This is a description.\" />\n```\n- select 的 value 属性可以是数组，不建议使用 option 的 selected 属性\n```\n<select multiple={true} value={['B', 'C']}>\n   <option value=\"A\">Apple</option>\n   <option value=\"B\">Banana</option>\n   <option value=\"C\">Cranberry</option>\n </select>\n```\n- input/textarea 的 onChange 用户每次输入都会触发（即使不失去焦点）\n- radio/checkbox/option 点击后触发 onChange\n\n### 8.2 综合表达组件示例\n\n1.定义复选框组件Checkboxes\n```\nimport React, { Component } from 'react';\n\nclass Checkboxes extends Component {\n  render(){\n      return <span>\n          A\n          <input onChange={this.props.handleCheck}  name=\"goodCheckbox\" type=\"checkbox\" value=\"A\"/>\n          B\n          <input onChange={this.props.handleCheck} name=\"goodCheckbox\" type=\"checkbox\" value=\"B\" />\n          C\n          <input onChange={this.props.handleCheck} name=\"goodCheckbox\" type=\"checkbox\" value=\"C\" />\n      </span>\n  }\n}\n\nexport default Checkboxes;\n\n```\n\n\n2.定义单选框按钮组RadioButtons\n```\n\nimport React, { Component } from 'react';\n\nclass RadioButtons extends Component {\n  saySomething(){\n      alert(\"我是一个很棒的单选框按钮组\");\n  }\n  render(){\n      return <span>\n          A\n          <input onChange={this.props.handleRadio} name=\"goodRadio\" type=\"radio\" value=\"A\"/>\n          B\n          <input onChange={this.props.handleRadio} name=\"goodRadio\" type=\"radio\" defaultChecked value=\"B\"/>\n          C\n          <input onChange={this.props.handleRadio} name=\"goodRadio\" type=\"radio\" value=\"C\"/>\n      </span>\n  }\n}\n\nexport default RadioButtons;\n\n```\n\n3.FormApp组件集成两个组件并处理表单逻辑\n```\n'use strict';\n\nimport React, { Component } from 'react';\nimport Checkboxes from './Checkboxes';\nimport RadioButtons from './RadioButtons';\n\nclass FormApp extends Component {\n\n  state = {\n      inputValue: '请输入...',\n      selectValue: 'A',\n      radioValue:'B',\n      checkValues:[],\n      textareaValue:'请输入...'\n  }\n\n  handleSubmit = (e) => {\n      e.preventDefault();\n\n      let formData = {\n          input: this.refs.goodInput.value,\n          select: this.refs.goodSelect.value,\n          textarea: this.refs.goodTextarea.value,\n          radio: this.state.radioValue,\n          check: this.state.checkValues,\n      }\n\n      alert('您即将提交表单')\n      console.log('你提交的数据是:')\n      console.log(formData);\n\n  }\n\n  handleRadio = (e) => {\n      this.setState({\n          radioValue: e.target.value,\n      })\n  }\n\n  handleCheck = (e) => {\n      let checkValues = this.state.checkValues.slice();\n      let newVal = e.target.value;\n      let index = checkValues.indexOf(newVal);\n\n      if( index == -1 ){\n          checkValues.push( newVal )\n      }else{\n          checkValues.splice(index,1);\n      }\n\n      this.setState({\n          checkValues: checkValues,\n      })\n  }\n\n  render(){\n      return <form onSubmit={this.handleSubmit}>\n          <h3> 请输入内容 </h3>\n          <input ref=\"goodInput\" type=\"text\" defaultValue={this.state.inputValue }/>\n          <br/>\n\n          <h3> 请选择 </h3>\n          <select defaultValue={ this.state.selectValue } ref=\"goodSelect\">\n              <option value=\"A\">A</option>\n              <option value=\"B\">B</option>\n              <option value=\"C\">C</option>\n              <option value=\"D\">D</option>\n              <option value=\"E\">E</option>\n          </select>\n          <br/>\n\n          <h3> 单项选择 </h3>\n          <RadioButtons ref=\"goodRadio\" handleRadio={this.handleRadio} />\n          <br/>\n\n          <h3> 多选按钮 </h3>\n          <Checkboxes handleCheck={this.handleCheck} />\n          <br/>\n\n          <h3> 反馈建议 </h3>\n          <textarea defaultValue={this.state.textareaValue} ref=\"goodTextarea\"></textarea>\n          <br/>\n\n          <button type=\"submit\">确认提交</button>\n      </form>\n  }\n}\n\nexport default FormApp;\n\n```\n\n## 9. mixin共享\n\nmixin 是一个普通对象，通过 mixin 可以在不同组件间共享代码，使你的React程序变得更为可重用。注意，ES6语法不支持mixin写法，而是可以通过decorator去实现代码共享，这里使用ES5语法做示例说明。\n```\n\nimport React from 'react';\n\nvar SetIntervalMixin = {\n  componentWillMount: function() {\n    this.intervals = [];\n  },\n  setInterval: function() {\n    this.intervals.push(setInterval.apply(null, arguments));\n  },\n  componentWillUnmount: function() {\n    this.intervals.forEach(clearInterval);\n  }\n};\n\nvar MixinDemo = React.createClass({\n  // Use the mixin\n  mixins: [SetIntervalMixin],\n  getInitialState: function() {\n    return {seconds: 0};\n  },\n  componentDidMount: function() {\n    // Call a method on the mixin\n    this.setInterval(this.tick, 1000);\n  },\n  tick: function() {\n    this.setState({seconds: this.state.seconds + 1});\n  },\n  render: function() {\n    return (\n      <p>\n        计时器已经运行了： {this.state.seconds} 秒.\n      </p>\n    );\n  }\n});\n\nexport default MixinDemo;\n\n```\n\n## 基础部分完结寄语\n\n总结起来，学习的难度不高，以上内容掌握后，基本能够进行React的开发，后续我们继续相关内容的讲解，内容预告：一步步教你如何用React写一个简单完整的应用功能。\n","slug":"hello-world","published":1,"date":"2016-03-13T13:34:15.521Z","updated":"2016-03-15T07:25:12.543Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciltbsehh00006sjr0eqbqx9v","content":"<blockquote>\n<p><strong>编者按：</strong>除组件化、虚拟DOM在复用以及性能上带来的一般好处外，React思想使得开发者之间更好的分工与合作，在配合上非常顺畅，规范的接口以及极强的约束，使得整个代码结构清晰，不同开发者的代码高度一致。</p>\n</blockquote>\n<p>课程示例代码请前往：<a href=\"https://github.com/zhufengreact/zhufeng-react-tutorial\" target=\"_blank\" rel=\"external\">https://github.com/zhufengreact/zhufeng-react-tutorial</a></p>\n<h2 id=\"0-本次课程大纲\"><a href=\"#0-本次课程大纲\" class=\"headerlink\" title=\"0. 本次课程大纲\"></a>0. 本次课程大纲</h2><p>课程主线如下：</p>\n<ul>\n<li>React是什么<br>react 是一个做 UI 的库，具体来说是做 UI 组件的库，专注于做 mvc 中的 v.</li>\n<li>为什么学React<br>api 少，类库易学<br>组件内聚，易于组合<br>原生组件和自定义组件融合渲染<br>状态/属性驱动全局更新，不用关注细节更新<br>ES6 webpack … 生态圈/工具链完善</li>\n<li>怎么用React（<code>本次课程的核心内容，分9个部分</code>）</li>\n</ul>\n<p><strong>提前告知，本次课程的示例采用ES6来写React组件代码，需要明确以下几点：</strong></p>\n<ul>\n<li>不支持getInitialState，如需在constructor通过this.state={}赋值，也可直接作为properties定义</li>\n<li>propTypes、defaultProps 作为properties定义。</li>\n<li>不支持mixins，可以使用decorator</li>\n</ul>\n<h2 id=\"1-React相关文件顶层api的介绍\"><a href=\"#1-React相关文件顶层api的介绍\" class=\"headerlink\" title=\"1. React相关文件顶层api的介绍\"></a>1. React相关文件顶层api的介绍</h2><p>最简单的React组件及其渲染<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 最简单的一个组件</span><br><span class=\"line\"> */</span><br><span class=\"line\">class SimpleComponent extends Component &#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;div&gt; here we go &lt;/div&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 我们可以看看React给我们提供了哪些顶层组件</span><br><span class=\"line\">console.log( React );</span><br><span class=\"line\"></span><br><span class=\"line\">export default SimpleComponent;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"react-js\"><a href=\"#react-js\" class=\"headerlink\" title=\"react.js\"></a>react.js</h3><p>React.Component 使用ES6的class创建组件用的API<br><br>React.createClass 使用ES5的class创建组件用的API<br><br>React.PropTypes<br><br>React.Children 操作 map/forEach children 工具类<br></p>\n<p>还有几个不是很常用的<br><br>React.createElement<br><br>React.cloneElement<br><br>React.createFactory<br><br>React.DOM</p>\n<h3 id=\"react-dom-js\"><a href=\"#react-dom-js\" class=\"headerlink\" title=\"react-dom.js\"></a>react-dom.js</h3><p>ReactDOM.render 渲染组件到 dom<br><br>ReactDOM.unmountComponentAtNode<br><br>ReactDOM.findDOMNode<br></p>\n<h3 id=\"react-dom-server-js\"><a href=\"#react-dom-server-js\" class=\"headerlink\" title=\"react-dom-server.js\"></a>react-dom-server.js</h3><p>ReactDOMServer.renderToString<br><br>ReactDOMServer.renderToStaticMarkup<br></p>\n<h2 id=\"2-jsx语法\"><a href=\"#2-jsx语法\" class=\"headerlink\" title=\"2. jsx语法\"></a>2. jsx语法</h2><p>类似 xml 的语法，用来描述组件树<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div classname=&quot;x&quot;&gt;</span><br><span class=\"line\">  &lt;a href=&quot;#&quot;&gt;#&lt;/a&gt;</span><br><span class=\"line\">    &lt;component x=&quot;y&quot;&gt;1&lt;/component&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>不用JSX，用React提供的API写的话<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.createElement(&apos;div&apos;,&#123;</span><br><span class=\"line\">  className:&apos;x&apos;</span><br><span class=\"line\">    &#125;,[</span><br><span class=\"line\">    React.createElement(&apos;a&apos;,&#123;href:&apos;#&apos;&#125;,&apos;#&apos;),</span><br><span class=\"line\">    React.createElement(Component,&#123;x:&apos;y&apos;&#125;,1);</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-1-注释、命名、根元素个数、JSX-嵌入变量\"><a href=\"#2-1-注释、命名、根元素个数、JSX-嵌入变量\" class=\"headerlink\" title=\"2.1 注释、命名、根元素个数、JSX 嵌入变量\"></a>2.1 注释、命名、根元素个数、JSX 嵌入变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. 组件命名遵循驼峰命名，首字母大写</span><br><span class=\"line\">class ComponentDemo extends Component &#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      /*</span><br><span class=\"line\">      2. 这是代码注释</span><br><span class=\"line\">      也可以是多行</span><br><span class=\"line\">      */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const name = this.props.name;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 3. render 方法 return 回来的根元素只能是一个，超过会报错</span><br><span class=\"line\">    // 4. &#123; &#125; 里面可以写JS代码</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        hello, &#123;name ? name : &quot;我是默认的&quot;&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default ComponentDemo;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>React只有一个限制， 组件只能渲染单个根节点。如果你想要返回多个节点，它们必须被包含在同一个节点里。</li>\n</ul>\n<h3 id=\"2-2-styles\"><a href=\"#2-2-styles\" class=\"headerlink\" title=\"2.2 styles\"></a>2.2 styles</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class StyleDemo extends Component &#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    // 5. 在JS文件里面给组件定义样式</span><br><span class=\"line\">    var MyComponentStyles = &#123;</span><br><span class=\"line\">        color: &apos;blue&apos;,</span><br><span class=\"line\">        fontSize: &apos;28px&apos;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div style=&#123;MyComponentStyles&#125;&gt;</span><br><span class=\"line\">          可以直接这样写行内样式</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default StyleDemo;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-JSX-SPREAD\"><a href=\"#2-3-JSX-SPREAD\" class=\"headerlink\" title=\"2.3  JSX SPREAD\"></a>2.3  JSX SPREAD</h3><p>可以用通过 {…obj} 来批量设置一个对象的键值对到组件的属性，注意顺序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class SpreadDemo extends Component &#123;</span><br><span class=\"line\">  componentWillMount()&#123;</span><br><span class=\"line\">    console.log(this.props);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;h1&gt; &#123;this.props.name&#125; is a &#123;this.props.type&#125; &lt;/h1&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default SpreadDemo;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-4-属性名不能和-js-关键字冲突\"><a href=\"#2-4-属性名不能和-js-关键字冲突\" class=\"headerlink\" title=\"2.4 属性名不能和 js 关键字冲突\"></a>2.4 属性名不能和 js 关键字冲突</h3><p>例如：className, readOnly, htmlfor</p>\n<h2 id=\"3-数据流：state-props-propType\"><a href=\"#3-数据流：state-props-propType\" class=\"headerlink\" title=\"3. 数据流：state props propType\"></a>3. 数据流：state props propType</h2><h3 id=\"3-1-state-amp-amp-setState\"><a href=\"#3-1-state-amp-amp-setState\" class=\"headerlink\" title=\"3.1 state &amp;&amp; setState\"></a>3.1 state &amp;&amp; setState</h3><p>用状态控制组件变化<br>可以把一个组件看做一个状态机, 每一次状态对应于组件的一个 ui</p>\n<p><strong>组件内部的状态，可以使用 state</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class StateDemo extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    secondsElapsed: 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  tick()&#123;</span><br><span class=\"line\">    this.setState(&#123; secondsElapsed: this.state.secondsElapsed + 1 &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount()&#123;</span><br><span class=\"line\">    this.interval = setInterval( this.tick.bind(this), 1000 );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount()&#123;</span><br><span class=\"line\">    clearInterval(this.interval);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;目前已经计时：&#123;this.state.secondsElapsed&#125;秒&lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default StateDemo;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-props\"><a href=\"#3-2-props\" class=\"headerlink\" title=\"3.2 props\"></a>3.2 props</h3><p>通过 this.props 可以获取传递给该组件的属性值，还可以通过定义 getDefaultProps 来指定默认属性值（这是ES5的写法，ES6定义组件的默认props可以直接写props）</p>\n<p>下面几个是props的常用API：</p>\n<ul>\n<li><code>this.props.children</code></li>\n<li><code>this.props.map</code></li>\n<li><code>this.props.filter</code></li>\n</ul>\n<p><strong>props是调用组件的时候传递进去的数据，一般用于组件树数据传递</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class PropsDemo extends Component &#123;</span><br><span class=\"line\">  props = &#123;</span><br><span class=\"line\">    title: &apos;这是默认的title属性值&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    console.log(this.props);</span><br><span class=\"line\"></span><br><span class=\"line\">    return &lt;b&gt;&#123;this.props.title&#125;&lt;/b&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default PropsDemo;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 组件调用方式</span><br><span class=\"line\">// &lt;PropsDemo title=&quot;设置的标题&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-propTypes\"><a href=\"#3-3-propTypes\" class=\"headerlink\" title=\"3.3 propTypes\"></a>3.3 propTypes</h3><p>通过指定 propTypes 可以校验props属性值的类型，校验可提升开发者体验，用于约定统一的接口规范。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component, PropTypes &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class PropTypesDemo extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  static propTypes = &#123;</span><br><span class=\"line\">    title: PropTypes.string.isRequired</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  props = &#123;</span><br><span class=\"line\">      title: &apos;默认的title&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;b&gt;&#123;this.props.title&#125;&lt;/b&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default PropTypesDemo;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-调用API定义组件\"><a href=\"#4-调用API定义组件\" class=\"headerlink\" title=\"4. 调用API定义组件\"></a>4. 调用API定义组件</h2><p>用 React.createClass或者React.Component 定义组件时允许传入相应的配置及组件API的使用，包括组件生命周期提供的一系列钩子函数。</p>\n<h3 id=\"4-1-组件初始定义\"><a href=\"#4-1-组件初始定义\" class=\"headerlink\" title=\"4.1 组件初始定义\"></a>4.1 组件初始定义</h3><ul>\n<li>getDefaultProps 得到默认属性对象，这个在ES6的时候不需要这样定义</li>\n<li>propTypes 属性检验规则</li>\n<li>mixins 组件间公用方法</li>\n</ul>\n<h3 id=\"4-2-初次创建组件时调用\"><a href=\"#4-2-初次创建组件时调用\" class=\"headerlink\" title=\"4.2 初次创建组件时调用\"></a>4.2 初次创建组件时调用</h3><ul>\n<li>getInitialState 得到初始状态对象</li>\n<li>render 返回组件树. 必须设置</li>\n<li>componentDidMount 渲染到 dom 树中是调用，只在客户端调用，可用于获取原生节点</li>\n</ul>\n<h3 id=\"4-3-组件的属性值改变时调用\"><a href=\"#4-3-组件的属性值改变时调用\" class=\"headerlink\" title=\"4.3 组件的属性值改变时调用\"></a>4.3 组件的属性值改变时调用</h3><ul>\n<li>componentWillReceiveProps 属性改变调用</li>\n<li>shouldComponentUpdate 判断是否需要重新渲染</li>\n<li>render 返回组件树. 必须设置</li>\n<li>componentDidUpdate 渲染到 dom 树中是调用, 可用于获取原生节点</li>\n</ul>\n<h3 id=\"4-4-销毁组件\"><a href=\"#4-4-销毁组件\" class=\"headerlink\" title=\"4.4 销毁组件\"></a>4.4 销毁组件</h3><ul>\n<li>componentWillUnmount 组件从 dom 销毁前调用</li>\n</ul>\n<h3 id=\"4-5-示例诠释组件全生命周期\"><a href=\"#4-5-示例诠释组件全生命周期\" class=\"headerlink\" title=\"4.5 示例诠释组件全生命周期\"></a>4.5 示例诠释组件全生命周期</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class LifeCycle extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  props = &#123;</span><br><span class=\"line\">    value: &apos;开始渲染&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillReceiveProps(nextProps)&#123;</span><br><span class=\"line\">    console.log(&apos;componentWillReceiveProps&apos;);</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">        value: nextProps.value</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  shouldComponentUpdate(nextProps,nextState)&#123;</span><br><span class=\"line\">    console.log(&apos;shouldComponentUpdate&apos;);</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUpdate(nextProps,nextState)&#123;</span><br><span class=\"line\">    console.log(&apos;componentWillUpdate&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillMount()&#123;</span><br><span class=\"line\">    console.log(&apos;componentWillMount&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    console.log(&apos;render&apos;);</span><br><span class=\"line\">    return &lt;span&gt;&#123;this.props.value&#125;&lt;/span&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">      console.log(&apos;componentDidMount&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidUpdate(prevProps,prevState) &#123;</span><br><span class=\"line\">      console.log(&apos;componentDidUpdate&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount(prevProps,prevState) &#123;</span><br><span class=\"line\">      console.log(&apos;componentWillUnmount&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default LifeCycle;</span><br></pre></td></tr></table></figure>\n<p>调用组件并销毁组件示例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">import LifeCycleDemo from &apos;./LifeCycleDemo&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class DestroyComponent extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    value:1,</span><br><span class=\"line\">    destroyed:false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  increase = () =&gt; &#123;</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      value: this.state.value + 1</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  destroy = () =&gt; &#123;</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      destroyed: true</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    if(this.state.destroyed)&#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;this.increase&#125;&gt;每次加1&lt;/button&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;this.destroy&#125;&gt;干掉这两个按钮&lt;/button&gt;</span><br><span class=\"line\">      &lt;/p&gt;</span><br><span class=\"line\">      &lt;LifeCycleDemo value=&#123;this.state.value&#125;/&gt;</span><br><span class=\"line\">    &lt;/div&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default DestroyComponent;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-6-回顾组件的渲染过程\"><a href=\"#4-6-回顾组件的渲染过程\" class=\"headerlink\" title=\"4.6 回顾组件的渲染过程\"></a>4.6 回顾组件的渲染过程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建-》渲染-》销毁</span><br><span class=\"line\"></span><br><span class=\"line\">getDefaultProps()</span><br><span class=\"line\">getInitialState()</span><br><span class=\"line\">componentWillMount()</span><br><span class=\"line\">render()</span><br><span class=\"line\">componentDidMount()</span><br><span class=\"line\">componentWillUnmount()</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新组件</span><br><span class=\"line\"></span><br><span class=\"line\">componentWillReceiveProps()</span><br><span class=\"line\">shouldComponentUpdate()</span><br><span class=\"line\">componentWillUpdate()</span><br><span class=\"line\">render()</span><br><span class=\"line\">componentDidUpdate()</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-使用ref对操作DOM\"><a href=\"#5-使用ref对操作DOM\" class=\"headerlink\" title=\"5. 使用ref对操作DOM\"></a>5. 使用ref对操作DOM</h2><ul>\n<li>React.findDOMNode</li>\n<li>this.refs.xxx</li>\n</ul>\n<p>获取DOM后可以方便结合现有非 react 类库的使用，通过 ref/refs 可以取得组件实例，进而取得原生节点，不过尽量通过 state/props 更新组件，不要使用该功能去更新组件的DOM。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">import ReactDOM, &#123; findDOMNode &#125; from &apos;react-dom&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class HandleDOMComponent extends Component &#123;</span><br><span class=\"line\">  componentDidMount()&#123;</span><br><span class=\"line\">    // 两种方式都可以获取到元素</span><br><span class=\"line\">    let ele = findDOMNode(this.refs.content);</span><br><span class=\"line\">    let ele2 = this.refs.content;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果想用 jquery，那么这是个好时机</span><br><span class=\"line\">    console.log( ele );</span><br><span class=\"line\">    console.log( ele.innerHTML );</span><br><span class=\"line\">    console.log( ele2.innerHTML );</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h3&gt;来吧，一起操作DOM&lt;/h3&gt;</span><br><span class=\"line\">        &lt;div ref=&apos;content&apos;&gt;这是我DOM元素里面的内容&lt;/div&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default HandleDOMComponent;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-事件event\"><a href=\"#6-事件event\" class=\"headerlink\" title=\"6. 事件event\"></a>6. 事件event</h2><p>可以通过设置原生 dom 组件的 onEventType 属性来监听 dom 事件，例如 onClick, onMouseDown，在加强组件内聚性的同时，避免了传统 html 的全局变量污染</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class HandleEvent extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = &#123; liked: false &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleClick = (event) =&gt; &#123;</span><br><span class=\"line\">    this.setState(&#123;liked: !this.state.liked&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    let text = this.state.liked ? &apos;喜欢&apos; : &apos;不喜欢&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;p onClick=&#123;this.handleClick&#125;&gt;</span><br><span class=\"line\">        我 &#123;text&#125; 你.</span><br><span class=\"line\">      &lt;/p&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default HandleEvent;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：事件回调函数参数为标准化的事件对象，可以不用考虑 IE</strong></p>\n<p>更多事件我们可以一起看<a href=\"http://reactjs.cn/react/docs/events.html#form-events\" target=\"_blank\" rel=\"external\">这里</a></p>\n<h2 id=\"7-组件的组合\"><a href=\"#7-组件的组合\" class=\"headerlink\" title=\"7. 组件的组合\"></a>7. 组件的组合</h2><h3 id=\"7-1-受限组件-amp-amp-非受限组件\"><a href=\"#7-1-受限组件-amp-amp-非受限组件\" class=\"headerlink\" title=\"7.1 受限组件 &amp;&amp; 非受限组件\"></a>7.1 受限组件 &amp;&amp; 非受限组件</h3><p>受限组件示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  return &lt;input type=&quot;text&quot; value=&quot;Hello!&quot; /&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>非受限组件示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  return &lt;input type=&quot;text&quot; /&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-2-使用自定义的组件\"><a href=\"#7-2-使用自定义的组件\" class=\"headerlink\" title=\"7.2 使用自定义的组件\"></a>7.2 使用自定义的组件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class ComponentA extends Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;a href=&apos;#&apos;&gt;我是组件A&lt;br/&gt;&lt;/a&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ComponentB extends Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;a href=&apos;#&apos;&gt;我是组件B&lt;/a&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class SelfCreateComponent extends Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;i&gt;</span><br><span class=\"line\">        &lt;ComponentA /&gt;</span><br><span class=\"line\">        &lt;ComponentB /&gt;</span><br><span class=\"line\">      &lt;/i&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default SelfCreateComponent;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-3-组合-CHILDREN\"><a href=\"#7-3-组合-CHILDREN\" class=\"headerlink\" title=\"7.3 组合 CHILDREN\"></a>7.3 组合 CHILDREN</h3><p>自定义组件中可以通过 this.props.children 访问自定义组件的子节点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义一个组件，通过React.Children 拿到组件里面的子元素</span><br><span class=\"line\">class ListComponent extends Component &#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;ul&gt;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        React.Children.map( this.props.children, function(c)&#123;</span><br><span class=\"line\">          return &lt;li&gt;&#123;c&#125;&lt;/li&gt;;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class UseChildrenComponent extends Component &#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;ListComponent&gt;</span><br><span class=\"line\">        &lt;a href=&quot;#&quot;&gt;Facebook&lt;/a&gt;</span><br><span class=\"line\">        &lt;a href=&quot;#&quot;&gt;Google&lt;/a&gt;</span><br><span class=\"line\">        &lt;a href=&quot;#&quot;&gt;SpaceX&lt;/a&gt;</span><br><span class=\"line\">      &lt;/ListComponent&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default UseChildrenComponent;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8-form表单操作\"><a href=\"#8-form表单操作\" class=\"headerlink\" title=\"8. form表单操作\"></a>8. form表单操作</h2><h3 id=\"8-1-React表单组件和-html-的不同点\"><a href=\"#8-1-React表单组件和-html-的不同点\" class=\"headerlink\" title=\"8.1 React表单组件和 html 的不同点\"></a>8.1 React表单组件和 html 的不同点</h3><ul>\n<li>value/checked 属性设置后，用户输入无效</li>\n<li><p>textarea 的值要设置在 value 属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;textarea name=&quot;description&quot; value=&quot;This is a description.&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>select 的 value 属性可以是数组，不建议使用 option 的 selected 属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select multiple=&#123;true&#125; value=&#123;[&apos;B&apos;, &apos;C&apos;]&#125;&gt;</span><br><span class=\"line\">   &lt;option value=&quot;A&quot;&gt;Apple&lt;/option&gt;</span><br><span class=\"line\">   &lt;option value=&quot;B&quot;&gt;Banana&lt;/option&gt;</span><br><span class=\"line\">   &lt;option value=&quot;C&quot;&gt;Cranberry&lt;/option&gt;</span><br><span class=\"line\"> &lt;/select&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>input/textarea 的 onChange 用户每次输入都会触发（即使不失去焦点）</p>\n</li>\n<li>radio/checkbox/option 点击后触发 onChange</li>\n</ul>\n<h3 id=\"8-2-综合表达组件示例\"><a href=\"#8-2-综合表达组件示例\" class=\"headerlink\" title=\"8.2 综合表达组件示例\"></a>8.2 综合表达组件示例</h3><p>1.定义复选框组件Checkboxes<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Checkboxes extends Component &#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">      return &lt;span&gt;</span><br><span class=\"line\">          A</span><br><span class=\"line\">          &lt;input onChange=&#123;this.props.handleCheck&#125;  name=&quot;goodCheckbox&quot; type=&quot;checkbox&quot; value=&quot;A&quot;/&gt;</span><br><span class=\"line\">          B</span><br><span class=\"line\">          &lt;input onChange=&#123;this.props.handleCheck&#125; name=&quot;goodCheckbox&quot; type=&quot;checkbox&quot; value=&quot;B&quot; /&gt;</span><br><span class=\"line\">          C</span><br><span class=\"line\">          &lt;input onChange=&#123;this.props.handleCheck&#125; name=&quot;goodCheckbox&quot; type=&quot;checkbox&quot; value=&quot;C&quot; /&gt;</span><br><span class=\"line\">      &lt;/span&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Checkboxes;</span><br></pre></td></tr></table></figure></p>\n<p>2.定义单选框按钮组RadioButtons<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class RadioButtons extends Component &#123;</span><br><span class=\"line\">  saySomething()&#123;</span><br><span class=\"line\">      alert(&quot;我是一个很棒的单选框按钮组&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">      return &lt;span&gt;</span><br><span class=\"line\">          A</span><br><span class=\"line\">          &lt;input onChange=&#123;this.props.handleRadio&#125; name=&quot;goodRadio&quot; type=&quot;radio&quot; value=&quot;A&quot;/&gt;</span><br><span class=\"line\">          B</span><br><span class=\"line\">          &lt;input onChange=&#123;this.props.handleRadio&#125; name=&quot;goodRadio&quot; type=&quot;radio&quot; defaultChecked value=&quot;B&quot;/&gt;</span><br><span class=\"line\">          C</span><br><span class=\"line\">          &lt;input onChange=&#123;this.props.handleRadio&#125; name=&quot;goodRadio&quot; type=&quot;radio&quot; value=&quot;C&quot;/&gt;</span><br><span class=\"line\">      &lt;/span&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default RadioButtons;</span><br></pre></td></tr></table></figure></p>\n<p>3.FormApp组件集成两个组件并处理表单逻辑<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">import Checkboxes from &apos;./Checkboxes&apos;;</span><br><span class=\"line\">import RadioButtons from &apos;./RadioButtons&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class FormApp extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">      inputValue: &apos;请输入...&apos;,</span><br><span class=\"line\">      selectValue: &apos;A&apos;,</span><br><span class=\"line\">      radioValue:&apos;B&apos;,</span><br><span class=\"line\">      checkValues:[],</span><br><span class=\"line\">      textareaValue:&apos;请输入...&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleSubmit = (e) =&gt; &#123;</span><br><span class=\"line\">      e.preventDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">      let formData = &#123;</span><br><span class=\"line\">          input: this.refs.goodInput.value,</span><br><span class=\"line\">          select: this.refs.goodSelect.value,</span><br><span class=\"line\">          textarea: this.refs.goodTextarea.value,</span><br><span class=\"line\">          radio: this.state.radioValue,</span><br><span class=\"line\">          check: this.state.checkValues,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      alert(&apos;您即将提交表单&apos;)</span><br><span class=\"line\">      console.log(&apos;你提交的数据是:&apos;)</span><br><span class=\"line\">      console.log(formData);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleRadio = (e) =&gt; &#123;</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">          radioValue: e.target.value,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleCheck = (e) =&gt; &#123;</span><br><span class=\"line\">      let checkValues = this.state.checkValues.slice();</span><br><span class=\"line\">      let newVal = e.target.value;</span><br><span class=\"line\">      let index = checkValues.indexOf(newVal);</span><br><span class=\"line\"></span><br><span class=\"line\">      if( index == -1 )&#123;</span><br><span class=\"line\">          checkValues.push( newVal )</span><br><span class=\"line\">      &#125;else&#123;</span><br><span class=\"line\">          checkValues.splice(index,1);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">          checkValues: checkValues,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">      return &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class=\"line\">          &lt;h3&gt; 请输入内容 &lt;/h3&gt;</span><br><span class=\"line\">          &lt;input ref=&quot;goodInput&quot; type=&quot;text&quot; defaultValue=&#123;this.state.inputValue &#125;/&gt;</span><br><span class=\"line\">          &lt;br/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;h3&gt; 请选择 &lt;/h3&gt;</span><br><span class=\"line\">          &lt;select defaultValue=&#123; this.state.selectValue &#125; ref=&quot;goodSelect&quot;&gt;</span><br><span class=\"line\">              &lt;option value=&quot;A&quot;&gt;A&lt;/option&gt;</span><br><span class=\"line\">              &lt;option value=&quot;B&quot;&gt;B&lt;/option&gt;</span><br><span class=\"line\">              &lt;option value=&quot;C&quot;&gt;C&lt;/option&gt;</span><br><span class=\"line\">              &lt;option value=&quot;D&quot;&gt;D&lt;/option&gt;</span><br><span class=\"line\">              &lt;option value=&quot;E&quot;&gt;E&lt;/option&gt;</span><br><span class=\"line\">          &lt;/select&gt;</span><br><span class=\"line\">          &lt;br/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;h3&gt; 单项选择 &lt;/h3&gt;</span><br><span class=\"line\">          &lt;RadioButtons ref=&quot;goodRadio&quot; handleRadio=&#123;this.handleRadio&#125; /&gt;</span><br><span class=\"line\">          &lt;br/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;h3&gt; 多选按钮 &lt;/h3&gt;</span><br><span class=\"line\">          &lt;Checkboxes handleCheck=&#123;this.handleCheck&#125; /&gt;</span><br><span class=\"line\">          &lt;br/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;h3&gt; 反馈建议 &lt;/h3&gt;</span><br><span class=\"line\">          &lt;textarea defaultValue=&#123;this.state.textareaValue&#125; ref=&quot;goodTextarea&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">          &lt;br/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;button type=&quot;submit&quot;&gt;确认提交&lt;/button&gt;</span><br><span class=\"line\">      &lt;/form&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default FormApp;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"9-mixin共享\"><a href=\"#9-mixin共享\" class=\"headerlink\" title=\"9. mixin共享\"></a>9. mixin共享</h2><p>mixin 是一个普通对象，通过 mixin 可以在不同组件间共享代码，使你的React程序变得更为可重用。注意，ES6语法不支持mixin写法，而是可以通过decorator去实现代码共享，这里使用ES5语法做示例说明。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">var SetIntervalMixin = &#123;</span><br><span class=\"line\">  componentWillMount: function() &#123;</span><br><span class=\"line\">    this.intervals = [];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setInterval: function() &#123;</span><br><span class=\"line\">    this.intervals.push(setInterval.apply(null, arguments));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  componentWillUnmount: function() &#123;</span><br><span class=\"line\">    this.intervals.forEach(clearInterval);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var MixinDemo = React.createClass(&#123;</span><br><span class=\"line\">  // Use the mixin</span><br><span class=\"line\">  mixins: [SetIntervalMixin],</span><br><span class=\"line\">  getInitialState: function() &#123;</span><br><span class=\"line\">    return &#123;seconds: 0&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  componentDidMount: function() &#123;</span><br><span class=\"line\">    // Call a method on the mixin</span><br><span class=\"line\">    this.setInterval(this.tick, 1000);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  tick: function() &#123;</span><br><span class=\"line\">    this.setState(&#123;seconds: this.state.seconds + 1&#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: function() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;p&gt;</span><br><span class=\"line\">        计时器已经运行了： &#123;this.state.seconds&#125; 秒.</span><br><span class=\"line\">      &lt;/p&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">export default MixinDemo;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"基础部分完结寄语\"><a href=\"#基础部分完结寄语\" class=\"headerlink\" title=\"基础部分完结寄语\"></a>基础部分完结寄语</h2><p>总结起来，学习的难度不高，以上内容掌握后，基本能够进行React的开发，后续我们继续相关内容的讲解，内容预告：一步步教你如何用React写一个简单完整的应用功能。</p>\n","excerpt":"","more":"<blockquote>\n<p><strong>编者按：</strong>除组件化、虚拟DOM在复用以及性能上带来的一般好处外，React思想使得开发者之间更好的分工与合作，在配合上非常顺畅，规范的接口以及极强的约束，使得整个代码结构清晰，不同开发者的代码高度一致。</p>\n</blockquote>\n<p>课程示例代码请前往：<a href=\"https://github.com/zhufengreact/zhufeng-react-tutorial\">https://github.com/zhufengreact/zhufeng-react-tutorial</a></p>\n<h2 id=\"0-本次课程大纲\"><a href=\"#0-本次课程大纲\" class=\"headerlink\" title=\"0. 本次课程大纲\"></a>0. 本次课程大纲</h2><p>课程主线如下：</p>\n<ul>\n<li>React是什么<br>react 是一个做 UI 的库，具体来说是做 UI 组件的库，专注于做 mvc 中的 v.</li>\n<li>为什么学React<br>api 少，类库易学<br>组件内聚，易于组合<br>原生组件和自定义组件融合渲染<br>状态/属性驱动全局更新，不用关注细节更新<br>ES6 webpack … 生态圈/工具链完善</li>\n<li>怎么用React（<code>本次课程的核心内容，分9个部分</code>）</li>\n</ul>\n<p><strong>提前告知，本次课程的示例采用ES6来写React组件代码，需要明确以下几点：</strong></p>\n<ul>\n<li>不支持getInitialState，如需在constructor通过this.state={}赋值，也可直接作为properties定义</li>\n<li>propTypes、defaultProps 作为properties定义。</li>\n<li>不支持mixins，可以使用decorator</li>\n</ul>\n<h2 id=\"1-React相关文件顶层api的介绍\"><a href=\"#1-React相关文件顶层api的介绍\" class=\"headerlink\" title=\"1. React相关文件顶层api的介绍\"></a>1. React相关文件顶层api的介绍</h2><p>最简单的React组件及其渲染<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 最简单的一个组件</span><br><span class=\"line\"> */</span><br><span class=\"line\">class SimpleComponent extends Component &#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;div&gt; here we go &lt;/div&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 我们可以看看React给我们提供了哪些顶层组件</span><br><span class=\"line\">console.log( React );</span><br><span class=\"line\"></span><br><span class=\"line\">export default SimpleComponent;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"react-js\"><a href=\"#react-js\" class=\"headerlink\" title=\"react.js\"></a>react.js</h3><p>React.Component 使用ES6的class创建组件用的API<br><br>React.createClass 使用ES5的class创建组件用的API<br><br>React.PropTypes<br><br>React.Children 操作 map/forEach children 工具类<br></p>\n<p>还有几个不是很常用的<br><br>React.createElement<br><br>React.cloneElement<br><br>React.createFactory<br><br>React.DOM</p>\n<h3 id=\"react-dom-js\"><a href=\"#react-dom-js\" class=\"headerlink\" title=\"react-dom.js\"></a>react-dom.js</h3><p>ReactDOM.render 渲染组件到 dom<br><br>ReactDOM.unmountComponentAtNode<br><br>ReactDOM.findDOMNode<br></p>\n<h3 id=\"react-dom-server-js\"><a href=\"#react-dom-server-js\" class=\"headerlink\" title=\"react-dom-server.js\"></a>react-dom-server.js</h3><p>ReactDOMServer.renderToString<br><br>ReactDOMServer.renderToStaticMarkup<br></p>\n<h2 id=\"2-jsx语法\"><a href=\"#2-jsx语法\" class=\"headerlink\" title=\"2. jsx语法\"></a>2. jsx语法</h2><p>类似 xml 的语法，用来描述组件树<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div classname=&quot;x&quot;&gt;</span><br><span class=\"line\">  &lt;a href=&quot;#&quot;&gt;#&lt;/a&gt;</span><br><span class=\"line\">    &lt;component x=&quot;y&quot;&gt;1&lt;/component&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>不用JSX，用React提供的API写的话<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.createElement(&apos;div&apos;,&#123;</span><br><span class=\"line\">  className:&apos;x&apos;</span><br><span class=\"line\">    &#125;,[</span><br><span class=\"line\">    React.createElement(&apos;a&apos;,&#123;href:&apos;#&apos;&#125;,&apos;#&apos;),</span><br><span class=\"line\">    React.createElement(Component,&#123;x:&apos;y&apos;&#125;,1);</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-1-注释、命名、根元素个数、JSX-嵌入变量\"><a href=\"#2-1-注释、命名、根元素个数、JSX-嵌入变量\" class=\"headerlink\" title=\"2.1 注释、命名、根元素个数、JSX 嵌入变量\"></a>2.1 注释、命名、根元素个数、JSX 嵌入变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. 组件命名遵循驼峰命名，首字母大写</span><br><span class=\"line\">class ComponentDemo extends Component &#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      /*</span><br><span class=\"line\">      2. 这是代码注释</span><br><span class=\"line\">      也可以是多行</span><br><span class=\"line\">      */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const name = this.props.name;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 3. render 方法 return 回来的根元素只能是一个，超过会报错</span><br><span class=\"line\">    // 4. &#123; &#125; 里面可以写JS代码</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        hello, &#123;name ? name : &quot;我是默认的&quot;&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default ComponentDemo;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>React只有一个限制， 组件只能渲染单个根节点。如果你想要返回多个节点，它们必须被包含在同一个节点里。</li>\n</ul>\n<h3 id=\"2-2-styles\"><a href=\"#2-2-styles\" class=\"headerlink\" title=\"2.2 styles\"></a>2.2 styles</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class StyleDemo extends Component &#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    // 5. 在JS文件里面给组件定义样式</span><br><span class=\"line\">    var MyComponentStyles = &#123;</span><br><span class=\"line\">        color: &apos;blue&apos;,</span><br><span class=\"line\">        fontSize: &apos;28px&apos;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div style=&#123;MyComponentStyles&#125;&gt;</span><br><span class=\"line\">          可以直接这样写行内样式</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default StyleDemo;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-JSX-SPREAD\"><a href=\"#2-3-JSX-SPREAD\" class=\"headerlink\" title=\"2.3  JSX SPREAD\"></a>2.3  JSX SPREAD</h3><p>可以用通过 {…obj} 来批量设置一个对象的键值对到组件的属性，注意顺序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class SpreadDemo extends Component &#123;</span><br><span class=\"line\">  componentWillMount()&#123;</span><br><span class=\"line\">    console.log(this.props);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;h1&gt; &#123;this.props.name&#125; is a &#123;this.props.type&#125; &lt;/h1&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default SpreadDemo;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-4-属性名不能和-js-关键字冲突\"><a href=\"#2-4-属性名不能和-js-关键字冲突\" class=\"headerlink\" title=\"2.4 属性名不能和 js 关键字冲突\"></a>2.4 属性名不能和 js 关键字冲突</h3><p>例如：className, readOnly, htmlfor</p>\n<h2 id=\"3-数据流：state-props-propType\"><a href=\"#3-数据流：state-props-propType\" class=\"headerlink\" title=\"3. 数据流：state props propType\"></a>3. 数据流：state props propType</h2><h3 id=\"3-1-state-amp-amp-setState\"><a href=\"#3-1-state-amp-amp-setState\" class=\"headerlink\" title=\"3.1 state &amp;&amp; setState\"></a>3.1 state &amp;&amp; setState</h3><p>用状态控制组件变化<br>可以把一个组件看做一个状态机, 每一次状态对应于组件的一个 ui</p>\n<p><strong>组件内部的状态，可以使用 state</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class StateDemo extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    secondsElapsed: 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  tick()&#123;</span><br><span class=\"line\">    this.setState(&#123; secondsElapsed: this.state.secondsElapsed + 1 &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount()&#123;</span><br><span class=\"line\">    this.interval = setInterval( this.tick.bind(this), 1000 );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount()&#123;</span><br><span class=\"line\">    clearInterval(this.interval);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;目前已经计时：&#123;this.state.secondsElapsed&#125;秒&lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default StateDemo;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-props\"><a href=\"#3-2-props\" class=\"headerlink\" title=\"3.2 props\"></a>3.2 props</h3><p>通过 this.props 可以获取传递给该组件的属性值，还可以通过定义 getDefaultProps 来指定默认属性值（这是ES5的写法，ES6定义组件的默认props可以直接写props）</p>\n<p>下面几个是props的常用API：</p>\n<ul>\n<li><code>this.props.children</code></li>\n<li><code>this.props.map</code></li>\n<li><code>this.props.filter</code></li>\n</ul>\n<p><strong>props是调用组件的时候传递进去的数据，一般用于组件树数据传递</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class PropsDemo extends Component &#123;</span><br><span class=\"line\">  props = &#123;</span><br><span class=\"line\">    title: &apos;这是默认的title属性值&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    console.log(this.props);</span><br><span class=\"line\"></span><br><span class=\"line\">    return &lt;b&gt;&#123;this.props.title&#125;&lt;/b&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default PropsDemo;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 组件调用方式</span><br><span class=\"line\">// &lt;PropsDemo title=&quot;设置的标题&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-propTypes\"><a href=\"#3-3-propTypes\" class=\"headerlink\" title=\"3.3 propTypes\"></a>3.3 propTypes</h3><p>通过指定 propTypes 可以校验props属性值的类型，校验可提升开发者体验，用于约定统一的接口规范。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component, PropTypes &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class PropTypesDemo extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  static propTypes = &#123;</span><br><span class=\"line\">    title: PropTypes.string.isRequired</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  props = &#123;</span><br><span class=\"line\">      title: &apos;默认的title&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;b&gt;&#123;this.props.title&#125;&lt;/b&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default PropTypesDemo;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-调用API定义组件\"><a href=\"#4-调用API定义组件\" class=\"headerlink\" title=\"4. 调用API定义组件\"></a>4. 调用API定义组件</h2><p>用 React.createClass或者React.Component 定义组件时允许传入相应的配置及组件API的使用，包括组件生命周期提供的一系列钩子函数。</p>\n<h3 id=\"4-1-组件初始定义\"><a href=\"#4-1-组件初始定义\" class=\"headerlink\" title=\"4.1 组件初始定义\"></a>4.1 组件初始定义</h3><ul>\n<li>getDefaultProps 得到默认属性对象，这个在ES6的时候不需要这样定义</li>\n<li>propTypes 属性检验规则</li>\n<li>mixins 组件间公用方法</li>\n</ul>\n<h3 id=\"4-2-初次创建组件时调用\"><a href=\"#4-2-初次创建组件时调用\" class=\"headerlink\" title=\"4.2 初次创建组件时调用\"></a>4.2 初次创建组件时调用</h3><ul>\n<li>getInitialState 得到初始状态对象</li>\n<li>render 返回组件树. 必须设置</li>\n<li>componentDidMount 渲染到 dom 树中是调用，只在客户端调用，可用于获取原生节点</li>\n</ul>\n<h3 id=\"4-3-组件的属性值改变时调用\"><a href=\"#4-3-组件的属性值改变时调用\" class=\"headerlink\" title=\"4.3 组件的属性值改变时调用\"></a>4.3 组件的属性值改变时调用</h3><ul>\n<li>componentWillReceiveProps 属性改变调用</li>\n<li>shouldComponentUpdate 判断是否需要重新渲染</li>\n<li>render 返回组件树. 必须设置</li>\n<li>componentDidUpdate 渲染到 dom 树中是调用, 可用于获取原生节点</li>\n</ul>\n<h3 id=\"4-4-销毁组件\"><a href=\"#4-4-销毁组件\" class=\"headerlink\" title=\"4.4 销毁组件\"></a>4.4 销毁组件</h3><ul>\n<li>componentWillUnmount 组件从 dom 销毁前调用</li>\n</ul>\n<h3 id=\"4-5-示例诠释组件全生命周期\"><a href=\"#4-5-示例诠释组件全生命周期\" class=\"headerlink\" title=\"4.5 示例诠释组件全生命周期\"></a>4.5 示例诠释组件全生命周期</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class LifeCycle extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  props = &#123;</span><br><span class=\"line\">    value: &apos;开始渲染&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillReceiveProps(nextProps)&#123;</span><br><span class=\"line\">    console.log(&apos;componentWillReceiveProps&apos;);</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">        value: nextProps.value</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  shouldComponentUpdate(nextProps,nextState)&#123;</span><br><span class=\"line\">    console.log(&apos;shouldComponentUpdate&apos;);</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUpdate(nextProps,nextState)&#123;</span><br><span class=\"line\">    console.log(&apos;componentWillUpdate&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillMount()&#123;</span><br><span class=\"line\">    console.log(&apos;componentWillMount&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    console.log(&apos;render&apos;);</span><br><span class=\"line\">    return &lt;span&gt;&#123;this.props.value&#125;&lt;/span&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">      console.log(&apos;componentDidMount&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidUpdate(prevProps,prevState) &#123;</span><br><span class=\"line\">      console.log(&apos;componentDidUpdate&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount(prevProps,prevState) &#123;</span><br><span class=\"line\">      console.log(&apos;componentWillUnmount&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default LifeCycle;</span><br></pre></td></tr></table></figure>\n<p>调用组件并销毁组件示例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">import LifeCycleDemo from &apos;./LifeCycleDemo&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class DestroyComponent extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    value:1,</span><br><span class=\"line\">    destroyed:false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  increase = () =&gt; &#123;</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      value: this.state.value + 1</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  destroy = () =&gt; &#123;</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      destroyed: true</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    if(this.state.destroyed)&#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;this.increase&#125;&gt;每次加1&lt;/button&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;this.destroy&#125;&gt;干掉这两个按钮&lt;/button&gt;</span><br><span class=\"line\">      &lt;/p&gt;</span><br><span class=\"line\">      &lt;LifeCycleDemo value=&#123;this.state.value&#125;/&gt;</span><br><span class=\"line\">    &lt;/div&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default DestroyComponent;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-6-回顾组件的渲染过程\"><a href=\"#4-6-回顾组件的渲染过程\" class=\"headerlink\" title=\"4.6 回顾组件的渲染过程\"></a>4.6 回顾组件的渲染过程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建-》渲染-》销毁</span><br><span class=\"line\"></span><br><span class=\"line\">getDefaultProps()</span><br><span class=\"line\">getInitialState()</span><br><span class=\"line\">componentWillMount()</span><br><span class=\"line\">render()</span><br><span class=\"line\">componentDidMount()</span><br><span class=\"line\">componentWillUnmount()</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新组件</span><br><span class=\"line\"></span><br><span class=\"line\">componentWillReceiveProps()</span><br><span class=\"line\">shouldComponentUpdate()</span><br><span class=\"line\">componentWillUpdate()</span><br><span class=\"line\">render()</span><br><span class=\"line\">componentDidUpdate()</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-使用ref对操作DOM\"><a href=\"#5-使用ref对操作DOM\" class=\"headerlink\" title=\"5. 使用ref对操作DOM\"></a>5. 使用ref对操作DOM</h2><ul>\n<li>React.findDOMNode</li>\n<li>this.refs.xxx</li>\n</ul>\n<p>获取DOM后可以方便结合现有非 react 类库的使用，通过 ref/refs 可以取得组件实例，进而取得原生节点，不过尽量通过 state/props 更新组件，不要使用该功能去更新组件的DOM。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">import ReactDOM, &#123; findDOMNode &#125; from &apos;react-dom&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class HandleDOMComponent extends Component &#123;</span><br><span class=\"line\">  componentDidMount()&#123;</span><br><span class=\"line\">    // 两种方式都可以获取到元素</span><br><span class=\"line\">    let ele = findDOMNode(this.refs.content);</span><br><span class=\"line\">    let ele2 = this.refs.content;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果想用 jquery，那么这是个好时机</span><br><span class=\"line\">    console.log( ele );</span><br><span class=\"line\">    console.log( ele.innerHTML );</span><br><span class=\"line\">    console.log( ele2.innerHTML );</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h3&gt;来吧，一起操作DOM&lt;/h3&gt;</span><br><span class=\"line\">        &lt;div ref=&apos;content&apos;&gt;这是我DOM元素里面的内容&lt;/div&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default HandleDOMComponent;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-事件event\"><a href=\"#6-事件event\" class=\"headerlink\" title=\"6. 事件event\"></a>6. 事件event</h2><p>可以通过设置原生 dom 组件的 onEventType 属性来监听 dom 事件，例如 onClick, onMouseDown，在加强组件内聚性的同时，避免了传统 html 的全局变量污染</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class HandleEvent extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = &#123; liked: false &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleClick = (event) =&gt; &#123;</span><br><span class=\"line\">    this.setState(&#123;liked: !this.state.liked&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    let text = this.state.liked ? &apos;喜欢&apos; : &apos;不喜欢&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;p onClick=&#123;this.handleClick&#125;&gt;</span><br><span class=\"line\">        我 &#123;text&#125; 你.</span><br><span class=\"line\">      &lt;/p&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default HandleEvent;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：事件回调函数参数为标准化的事件对象，可以不用考虑 IE</strong></p>\n<p>更多事件我们可以一起看<a href=\"http://reactjs.cn/react/docs/events.html#form-events\">这里</a></p>\n<h2 id=\"7-组件的组合\"><a href=\"#7-组件的组合\" class=\"headerlink\" title=\"7. 组件的组合\"></a>7. 组件的组合</h2><h3 id=\"7-1-受限组件-amp-amp-非受限组件\"><a href=\"#7-1-受限组件-amp-amp-非受限组件\" class=\"headerlink\" title=\"7.1 受限组件 &amp;&amp; 非受限组件\"></a>7.1 受限组件 &amp;&amp; 非受限组件</h3><p>受限组件示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  return &lt;input type=&quot;text&quot; value=&quot;Hello!&quot; /&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>非受限组件示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  return &lt;input type=&quot;text&quot; /&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-2-使用自定义的组件\"><a href=\"#7-2-使用自定义的组件\" class=\"headerlink\" title=\"7.2 使用自定义的组件\"></a>7.2 使用自定义的组件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class ComponentA extends Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;a href=&apos;#&apos;&gt;我是组件A&lt;br/&gt;&lt;/a&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ComponentB extends Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;a href=&apos;#&apos;&gt;我是组件B&lt;/a&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class SelfCreateComponent extends Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;i&gt;</span><br><span class=\"line\">        &lt;ComponentA /&gt;</span><br><span class=\"line\">        &lt;ComponentB /&gt;</span><br><span class=\"line\">      &lt;/i&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default SelfCreateComponent;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-3-组合-CHILDREN\"><a href=\"#7-3-组合-CHILDREN\" class=\"headerlink\" title=\"7.3 组合 CHILDREN\"></a>7.3 组合 CHILDREN</h3><p>自定义组件中可以通过 this.props.children 访问自定义组件的子节点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义一个组件，通过React.Children 拿到组件里面的子元素</span><br><span class=\"line\">class ListComponent extends Component &#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return &lt;ul&gt;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        React.Children.map( this.props.children, function(c)&#123;</span><br><span class=\"line\">          return &lt;li&gt;&#123;c&#125;&lt;/li&gt;;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class UseChildrenComponent extends Component &#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;ListComponent&gt;</span><br><span class=\"line\">        &lt;a href=&quot;#&quot;&gt;Facebook&lt;/a&gt;</span><br><span class=\"line\">        &lt;a href=&quot;#&quot;&gt;Google&lt;/a&gt;</span><br><span class=\"line\">        &lt;a href=&quot;#&quot;&gt;SpaceX&lt;/a&gt;</span><br><span class=\"line\">      &lt;/ListComponent&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default UseChildrenComponent;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8-form表单操作\"><a href=\"#8-form表单操作\" class=\"headerlink\" title=\"8. form表单操作\"></a>8. form表单操作</h2><h3 id=\"8-1-React表单组件和-html-的不同点\"><a href=\"#8-1-React表单组件和-html-的不同点\" class=\"headerlink\" title=\"8.1 React表单组件和 html 的不同点\"></a>8.1 React表单组件和 html 的不同点</h3><ul>\n<li>value/checked 属性设置后，用户输入无效</li>\n<li><p>textarea 的值要设置在 value 属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;textarea name=&quot;description&quot; value=&quot;This is a description.&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>select 的 value 属性可以是数组，不建议使用 option 的 selected 属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select multiple=&#123;true&#125; value=&#123;[&apos;B&apos;, &apos;C&apos;]&#125;&gt;</span><br><span class=\"line\">   &lt;option value=&quot;A&quot;&gt;Apple&lt;/option&gt;</span><br><span class=\"line\">   &lt;option value=&quot;B&quot;&gt;Banana&lt;/option&gt;</span><br><span class=\"line\">   &lt;option value=&quot;C&quot;&gt;Cranberry&lt;/option&gt;</span><br><span class=\"line\"> &lt;/select&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>input/textarea 的 onChange 用户每次输入都会触发（即使不失去焦点）</p>\n</li>\n<li>radio/checkbox/option 点击后触发 onChange</li>\n</ul>\n<h3 id=\"8-2-综合表达组件示例\"><a href=\"#8-2-综合表达组件示例\" class=\"headerlink\" title=\"8.2 综合表达组件示例\"></a>8.2 综合表达组件示例</h3><p>1.定义复选框组件Checkboxes<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Checkboxes extends Component &#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">      return &lt;span&gt;</span><br><span class=\"line\">          A</span><br><span class=\"line\">          &lt;input onChange=&#123;this.props.handleCheck&#125;  name=&quot;goodCheckbox&quot; type=&quot;checkbox&quot; value=&quot;A&quot;/&gt;</span><br><span class=\"line\">          B</span><br><span class=\"line\">          &lt;input onChange=&#123;this.props.handleCheck&#125; name=&quot;goodCheckbox&quot; type=&quot;checkbox&quot; value=&quot;B&quot; /&gt;</span><br><span class=\"line\">          C</span><br><span class=\"line\">          &lt;input onChange=&#123;this.props.handleCheck&#125; name=&quot;goodCheckbox&quot; type=&quot;checkbox&quot; value=&quot;C&quot; /&gt;</span><br><span class=\"line\">      &lt;/span&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Checkboxes;</span><br></pre></td></tr></table></figure></p>\n<p>2.定义单选框按钮组RadioButtons<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class RadioButtons extends Component &#123;</span><br><span class=\"line\">  saySomething()&#123;</span><br><span class=\"line\">      alert(&quot;我是一个很棒的单选框按钮组&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">      return &lt;span&gt;</span><br><span class=\"line\">          A</span><br><span class=\"line\">          &lt;input onChange=&#123;this.props.handleRadio&#125; name=&quot;goodRadio&quot; type=&quot;radio&quot; value=&quot;A&quot;/&gt;</span><br><span class=\"line\">          B</span><br><span class=\"line\">          &lt;input onChange=&#123;this.props.handleRadio&#125; name=&quot;goodRadio&quot; type=&quot;radio&quot; defaultChecked value=&quot;B&quot;/&gt;</span><br><span class=\"line\">          C</span><br><span class=\"line\">          &lt;input onChange=&#123;this.props.handleRadio&#125; name=&quot;goodRadio&quot; type=&quot;radio&quot; value=&quot;C&quot;/&gt;</span><br><span class=\"line\">      &lt;/span&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default RadioButtons;</span><br></pre></td></tr></table></figure></p>\n<p>3.FormApp组件集成两个组件并处理表单逻辑<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">import Checkboxes from &apos;./Checkboxes&apos;;</span><br><span class=\"line\">import RadioButtons from &apos;./RadioButtons&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class FormApp extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">      inputValue: &apos;请输入...&apos;,</span><br><span class=\"line\">      selectValue: &apos;A&apos;,</span><br><span class=\"line\">      radioValue:&apos;B&apos;,</span><br><span class=\"line\">      checkValues:[],</span><br><span class=\"line\">      textareaValue:&apos;请输入...&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleSubmit = (e) =&gt; &#123;</span><br><span class=\"line\">      e.preventDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">      let formData = &#123;</span><br><span class=\"line\">          input: this.refs.goodInput.value,</span><br><span class=\"line\">          select: this.refs.goodSelect.value,</span><br><span class=\"line\">          textarea: this.refs.goodTextarea.value,</span><br><span class=\"line\">          radio: this.state.radioValue,</span><br><span class=\"line\">          check: this.state.checkValues,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      alert(&apos;您即将提交表单&apos;)</span><br><span class=\"line\">      console.log(&apos;你提交的数据是:&apos;)</span><br><span class=\"line\">      console.log(formData);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleRadio = (e) =&gt; &#123;</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">          radioValue: e.target.value,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleCheck = (e) =&gt; &#123;</span><br><span class=\"line\">      let checkValues = this.state.checkValues.slice();</span><br><span class=\"line\">      let newVal = e.target.value;</span><br><span class=\"line\">      let index = checkValues.indexOf(newVal);</span><br><span class=\"line\"></span><br><span class=\"line\">      if( index == -1 )&#123;</span><br><span class=\"line\">          checkValues.push( newVal )</span><br><span class=\"line\">      &#125;else&#123;</span><br><span class=\"line\">          checkValues.splice(index,1);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">          checkValues: checkValues,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">      return &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class=\"line\">          &lt;h3&gt; 请输入内容 &lt;/h3&gt;</span><br><span class=\"line\">          &lt;input ref=&quot;goodInput&quot; type=&quot;text&quot; defaultValue=&#123;this.state.inputValue &#125;/&gt;</span><br><span class=\"line\">          &lt;br/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;h3&gt; 请选择 &lt;/h3&gt;</span><br><span class=\"line\">          &lt;select defaultValue=&#123; this.state.selectValue &#125; ref=&quot;goodSelect&quot;&gt;</span><br><span class=\"line\">              &lt;option value=&quot;A&quot;&gt;A&lt;/option&gt;</span><br><span class=\"line\">              &lt;option value=&quot;B&quot;&gt;B&lt;/option&gt;</span><br><span class=\"line\">              &lt;option value=&quot;C&quot;&gt;C&lt;/option&gt;</span><br><span class=\"line\">              &lt;option value=&quot;D&quot;&gt;D&lt;/option&gt;</span><br><span class=\"line\">              &lt;option value=&quot;E&quot;&gt;E&lt;/option&gt;</span><br><span class=\"line\">          &lt;/select&gt;</span><br><span class=\"line\">          &lt;br/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;h3&gt; 单项选择 &lt;/h3&gt;</span><br><span class=\"line\">          &lt;RadioButtons ref=&quot;goodRadio&quot; handleRadio=&#123;this.handleRadio&#125; /&gt;</span><br><span class=\"line\">          &lt;br/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;h3&gt; 多选按钮 &lt;/h3&gt;</span><br><span class=\"line\">          &lt;Checkboxes handleCheck=&#123;this.handleCheck&#125; /&gt;</span><br><span class=\"line\">          &lt;br/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;h3&gt; 反馈建议 &lt;/h3&gt;</span><br><span class=\"line\">          &lt;textarea defaultValue=&#123;this.state.textareaValue&#125; ref=&quot;goodTextarea&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">          &lt;br/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;button type=&quot;submit&quot;&gt;确认提交&lt;/button&gt;</span><br><span class=\"line\">      &lt;/form&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default FormApp;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"9-mixin共享\"><a href=\"#9-mixin共享\" class=\"headerlink\" title=\"9. mixin共享\"></a>9. mixin共享</h2><p>mixin 是一个普通对象，通过 mixin 可以在不同组件间共享代码，使你的React程序变得更为可重用。注意，ES6语法不支持mixin写法，而是可以通过decorator去实现代码共享，这里使用ES5语法做示例说明。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">var SetIntervalMixin = &#123;</span><br><span class=\"line\">  componentWillMount: function() &#123;</span><br><span class=\"line\">    this.intervals = [];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setInterval: function() &#123;</span><br><span class=\"line\">    this.intervals.push(setInterval.apply(null, arguments));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  componentWillUnmount: function() &#123;</span><br><span class=\"line\">    this.intervals.forEach(clearInterval);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var MixinDemo = React.createClass(&#123;</span><br><span class=\"line\">  // Use the mixin</span><br><span class=\"line\">  mixins: [SetIntervalMixin],</span><br><span class=\"line\">  getInitialState: function() &#123;</span><br><span class=\"line\">    return &#123;seconds: 0&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  componentDidMount: function() &#123;</span><br><span class=\"line\">    // Call a method on the mixin</span><br><span class=\"line\">    this.setInterval(this.tick, 1000);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  tick: function() &#123;</span><br><span class=\"line\">    this.setState(&#123;seconds: this.state.seconds + 1&#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: function() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;p&gt;</span><br><span class=\"line\">        计时器已经运行了： &#123;this.state.seconds&#125; 秒.</span><br><span class=\"line\">      &lt;/p&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">export default MixinDemo;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"基础部分完结寄语\"><a href=\"#基础部分完结寄语\" class=\"headerlink\" title=\"基础部分完结寄语\"></a>基础部分完结寄语</h2><p>总结起来，学习的难度不高，以上内容掌握后，基本能够进行React的开发，后续我们继续相关内容的讲解，内容预告：一步步教你如何用React写一个简单完整的应用功能。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}